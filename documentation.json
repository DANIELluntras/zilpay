{
  "pipes": [],
  "interfaces": [
    {
      "name": "DataTable",
      "id": "interface-DataTable-ff09de63e2a180c5197a2714ffc17931",
      "file": "src/app/shared/utils/interfaces/data-table.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface DataTable {\n  athlete: string\n  age: number\n  country: string\n  sport: string\n  year: number\n  date: Date | String\n}\n\nexport interface IConfigRouter{\n  name: string\n  path: string\n}\n\nexport interface ITimer{\n  name: string\n  id: number\n}\n",
      "properties": [
        {
          "name": "age",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "athlete",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "country",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "date",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date | String",
          "optional": false,
          "description": "",
          "line": 7
        },
        {
          "name": "sport",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "year",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "IAccount",
      "id": "interface-IAccount-41dad17e0b6825755061fd3e0437c42c",
      "file": "src/app/shared/utils/interfaces/account/account.type.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAccount{\n  owner: string\n  repo: string\n  link: string\n  id: string\n}\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "link",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "owner",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "repo",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "IAuthInfoResponse",
      "id": "interface-IAuthInfoResponse-2d6021655fcf22057d935f07e531cb56",
      "file": "src/app/shared/utils/interfaces/auth/auth-info-user.types.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAuthInfoUser {\n  email: string\n  password: string\n}\n\nexport interface IAuthInfoResponse {\n  uid: string,\n  email: string,\n  emailVerified: boolean,\n  isAnonymous: boolean,\n  lastLoginAt: string,\n  apiKey: string,\n  appName: string\n}\n",
      "properties": [
        {
          "name": "apiKey",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "appName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "email",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "emailVerified",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "isAnonymous",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "lastLoginAt",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "uid",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 7
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "IAuthInfoUser",
      "id": "interface-IAuthInfoUser-2d6021655fcf22057d935f07e531cb56",
      "file": "src/app/shared/utils/interfaces/auth/auth-info-user.types.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface IAuthInfoUser {\n  email: string\n  password: string\n}\n\nexport interface IAuthInfoResponse {\n  uid: string,\n  email: string,\n  emailVerified: boolean,\n  isAnonymous: boolean,\n  lastLoginAt: string,\n  apiKey: string,\n  appName: string\n}\n",
      "properties": [
        {
          "name": "email",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "password",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "IConfigRouter",
      "id": "interface-IConfigRouter-ff09de63e2a180c5197a2714ffc17931",
      "file": "src/app/shared/utils/interfaces/data-table.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface DataTable {\n  athlete: string\n  age: number\n  country: string\n  sport: string\n  year: number\n  date: Date | String\n}\n\nexport interface IConfigRouter{\n  name: string\n  path: string\n}\n\nexport interface ITimer{\n  name: string\n  id: number\n}\n",
      "properties": [
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "path",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "IDialoConfig",
      "id": "interface-IDialoConfig-65f3c749c9a53cb48c917db217ed2b3c",
      "file": "src/app/shared/utils/services/overlay/overlay-pop-up.service.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {Overlay, OverlayConfig} from \"@angular/cdk/overlay\";\nimport {ComponentPortal} from \"@angular/cdk/portal\";\nimport {PopUpLoginComponent} from \"../../../../module/header/pop-up-login/pop-up-login.component\";\nimport {OverlayPopUpRef} from \"./overlay-pop-up.ref\";\n\ninterface IDialoConfig {\n  panelClass?: string\n  hasBackdrop?: boolean\n  backdropClass?: string\n}\n\nconst DEFAULT_CONFIG: IDialoConfig = {\n  hasBackdrop: true,\n  backdropClass: 'dark-backdrop',\n  panelClass: 'elixir-dialog-panel'\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OverlayPopUpService {\n\n  dialogRef: any\n  overlayRef: any\n  filePortal: any\n\n  constructor(private _overlay: Overlay) {\n  }\n\n  open(event: MouseEvent, config: IDialoConfig = {}) {\n    const dialogConfig = {...DEFAULT_CONFIG, ...config}\n    this.overlayRef = this.createOverlay(dialogConfig, event)\n    this.dialogRef = new OverlayPopUpRef(this.overlayRef)\n    this.filePortal = new ComponentPortal(PopUpLoginComponent)\n    this.overlayRef.attach(this.filePortal)\n\n    this.overlayRef.backdropClick().subscribe((_: any) => this.dialogRef.close())\n    return this.overlayRef\n  }\n\n  closeOverlay() {\n    this.dialogRef.close()\n  }\n\n  private createOverlay(config: IDialoConfig, event: MouseEvent) {\n    const overlayConfig = this.getOverlayConfig(config, event)\n    return this._overlay.create(overlayConfig)\n  }\n\n  private getOverlayConfig(config: IDialoConfig, event: MouseEvent) {\n    const positionStrategy = this._overlay.position().global().left(event.clientX - 176 + 'px')\n      .top((event.clientY + 3) + 'px')\n\n    const overlayConfig = new OverlayConfig({\n      hasBackdrop: config.hasBackdrop,\n      backdropClass: config.backdropClass,\n      panelClass: config.panelClass,\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy\n    })\n    return overlayConfig\n  }\n}\n",
      "properties": [
        {
          "name": "backdropClass",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 10
        },
        {
          "name": "hasBackdrop",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 9
        },
        {
          "name": "panelClass",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 8
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "INewRepository",
      "id": "interface-INewRepository-66ecab595f568ece08b3f028a8a0ee91",
      "file": "src/app/shared/utils/interfaces/newRepository/new-repository.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface INewRepository {\n  template: string\n  id: string\n  check: boolean\n  icon: string\n}\n\nexport interface IWrapperRepository {\n  template: string\n  owner: string\n  repositoryName: string\n  description? : string\n  available: boolean\n}\n\n",
      "properties": [
        {
          "name": "check",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 4
        },
        {
          "name": "icon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "template",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "IOffsetPopUp",
      "id": "interface-IOffsetPopUp-988dbe1c6d0ce2907a89a4f04e5f11ea",
      "file": "src/app/module/header/pop-up-login/pop-up-state.service.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Subject} from \"rxjs\";\n\nexport interface IOffsetPopUp {\n  offsetX: number,\n  offsetY: number\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PopUpStateService {\n  private _statePopUpLogin: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false)\n  statePopUp$ = this._statePopUpLogin.asObservable()\n\n  private _coordinates: Subject<IOffsetPopUp> = new Subject<IOffsetPopUp>()\n  coordinates$ = this._coordinates.asObservable()\n\n  coordinates(value: IOffsetPopUp) {\n    this._coordinates.next(value)\n  }\n\n  statePopLogin(value: boolean) {\n    this._statePopUpLogin.next(value)\n  }\n}\n",
      "properties": [
        {
          "name": "offsetX",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "offsetY",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 6
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "ITimer",
      "id": "interface-ITimer-ff09de63e2a180c5197a2714ffc17931",
      "file": "src/app/shared/utils/interfaces/data-table.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface DataTable {\n  athlete: string\n  age: number\n  country: string\n  sport: string\n  year: number\n  date: Date | String\n}\n\nexport interface IConfigRouter{\n  name: string\n  path: string\n}\n\nexport interface ITimer{\n  name: string\n  id: number\n}\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "IWrapperRepository",
      "id": "interface-IWrapperRepository-66ecab595f568ece08b3f028a8a0ee91",
      "file": "src/app/shared/utils/interfaces/newRepository/new-repository.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface INewRepository {\n  template: string\n  id: string\n  check: boolean\n  icon: string\n}\n\nexport interface IWrapperRepository {\n  template: string\n  owner: string\n  repositoryName: string\n  description? : string\n  available: boolean\n}\n\n",
      "properties": [
        {
          "name": "available",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 12
        },
        {
          "name": "owner",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "repositoryName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "template",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    },
    {
      "name": "User",
      "id": "interface-User-78aee791355a67bdfbd3eaa4a1eb9904",
      "file": "src/app/shared/utils/interfaces/user/user.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface User {\n  uid?: string\n  displayName: string\n  email?: string\n  photoURL?: string\n}\n",
      "properties": [
        {
          "name": "displayName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "email",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "photoURL",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 5
        },
        {
          "name": "uid",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "",
          "line": 2
        }
      ],
      "indexSignatures": [],
      "kind": 164,
      "methods": []
    }
  ],
  "injectables": [
    {
      "name": "AbstractApiServiceService",
      "id": "injectable-AbstractApiServiceService-51d55e285726912915548f4ebe789c36",
      "file": "src/app/shared/utils/services/abstract/abstract-api-service.service.ts",
      "properties": [],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AbstractApiServiceService {\n\n  constructor() { }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 6
      },
      "type": "injectable"
    },
    {
      "name": "AccountService",
      "id": "injectable-AccountService-b68495d9d8e7b697235e4dab14ceabf6",
      "file": "src/app/shared/utils/services/account/account.service.ts",
      "properties": [
        {
          "name": "_repoData",
          "defaultValue": "new BehaviorSubject<IAccount[]>([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<IAccount[]>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [121]
        },
        {
          "name": "dataRepo$",
          "defaultValue": "this._repoData.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methods": [
        {
          "name": "filterDataFromQuery",
          "args": [
            {
              "name": "select",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "select",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "repoData",
          "args": [
            {
              "name": "data",
              "type": "IAccount[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "IAccount[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {ConnectionService} from \"../firebase/connection.service\";\nimport {BehaviorSubject} from \"rxjs\";\nimport {IAccount} from \"../../interfaces\";\nimport {map} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountService {\n\n  private _repoData: BehaviorSubject<IAccount[]> = new BehaviorSubject<IAccount[]>([])\n  dataRepo$ = this._repoData.asObservable()\n\n  constructor(private _firebase: ConnectionService) {\n  }\n\n  repoData(data: IAccount[]) {\n    this._repoData.next(data)\n  }\n\n  filterDataFromQuery(select: string) {\n    this._firebase.data.snapshotChanges()\n      .pipe(map(changeData => changeData\n        .map(c => {\n          let a = c.payload.doc.data();\n          return {\n            owner: a.owner,\n            repo:\n            a.repo,\n            link: a.link,\n            id: c.payload.doc.id\n          }\n        }))).subscribe(data => {\n      data.filter(e => e.repo.toUpperCase().includes(select))\n    })\n\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_firebase",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "_firebase",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "AuthService",
      "id": "injectable-AuthService-d61c66338b4e3243c933d989e32e0937",
      "file": "src/app/shared/utils/services/auth/auth.service.ts",
      "properties": [
        {
          "name": "afAuth",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "AngularFireAuth",
          "optional": false,
          "description": "",
          "line": 19,
          "modifierKind": [123]
        },
        {
          "name": "user",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "User | any",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "methods": [
        {
          "name": "checkLocalStorage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "getDataFromFirebase",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "handleError",
          "args": [
            {
              "name": "error",
              "type": "FirebaseError",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "error",
              "type": "FirebaseError",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "logout",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "signInWithEmail",
          "args": [
            {
              "name": "infoUser",
              "type": "IAuthInfoUser",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "infoUser",
              "type": "IAuthInfoUser",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "signUp",
          "args": [
            {
              "name": "infoUser",
              "type": "IAuthInfoUser",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "infoUser",
              "type": "IAuthInfoUser",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable, NgZone} from '@angular/core';\nimport {AngularFireAuth} from \"@angular/fire/compat/auth\";\nimport {UserService} from \"../user/user-service\";\nimport {Router} from \"@angular/router\";\nimport {User} from \"../../interfaces/user/user\";\nimport {IAuthInfoUser} from \"../../interfaces/auth/auth-info-user.types\";\nimport {SpinnerStateService} from \"../../../spinner/spinner-state.service\";\nimport firebase from \"firebase/compat\";\nimport {throwError} from \"rxjs\";\nimport FirebaseError = firebase.FirebaseError;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  user: User | any\n\n  constructor(private ngZone: NgZone,\n              public afAuth: AngularFireAuth,\n              private _router: Router,\n              private _userService: UserService,\n              private _sppinerService: SpinnerStateService\n  ) {\n    this.checkLocalStorage()\n  }\n\n  getDataFromFirebase() {\n    this.afAuth.authState.subscribe(auth => {\n      if (auth) {\n        this.user = auth;\n        console.log('Authenticated');\n        this._userService.setUserLoggedIn(auth)\n      } else {\n        this._sppinerService.setStateBehaviorSpinner(false)\n        console.log('Not authenticated')\n      }\n    })\n  }\n\n  signInWithEmail(infoUser: IAuthInfoUser) {\n    return this.afAuth.signInWithEmailAndPassword(infoUser.email, infoUser.password)\n      .then((result) => {\n        this._userService.setUserLoggedIn(result)\n        this.ngZone.run(() => {\n          this._router.navigate(['account'])\n          this._sppinerService.setStateBehaviorSpinner(true)\n        })\n      }).catch(err => {\n        this._router.navigate(['/auth/test'])\n        this._sppinerService.setStateBehaviorSpinner(false)\n        return throwError(err)\n      })\n  }\n\n  signUp(infoUser: IAuthInfoUser) {\n    return this.afAuth.createUserWithEmailAndPassword(infoUser.email, infoUser.password)\n      .then((resp) => {\n          this._sppinerService.setStateBehaviorSpinner(false)\n        }\n      ).catch((error) => {\n        console.error(\"error2\")\n          this._sppinerService.setStateBehaviorSpinner(false)\n          // console.info(error.code)\n          return 2\n        }\n      )\n  }\n\n  logout() {\n    this._userService.clearLocalStorage()\n    this.afAuth.signOut().then(() => {\n      this._router.navigate(['/', 'auth/test'])\n    })\n  }\n\n  private checkLocalStorage() {\n    if (!localStorage.getItem('user')) {\n      this.getDataFromFirebase()\n    } else {\n      console.log('localStorage ready')\n    }\n  }\n\n  private handleError(error: FirebaseError) {\n    // Handle the HTTP error here\n    console.log('handle Error')\n    {\n      if (error.name === 'FirebaseError') {\n        console.log(error)\n      }\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "ngZone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "afAuth",
            "type": "AngularFireAuth",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_userService",
            "type": "UserService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_sppinerService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "ngZone",
            "type": "NgZone",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "afAuth",
            "type": "AngularFireAuth",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_userService",
            "type": "UserService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_sppinerService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "ConnectionService",
      "id": "injectable-ConnectionService-299e9b8f24ff55770f4c223f9cf2a260",
      "file": "src/app/shared/utils/services/firebase/connection.service.ts",
      "properties": [
        {
          "name": "_data",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [121]
        },
        {
          "name": "_dbPath",
          "defaultValue": "'/repository'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [121]
        },
        {
          "name": "repositoryRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "AngularFirestoreCollection<any>",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "methods": [
        {
          "name": "createRepository",
          "args": [
            {
              "name": "data",
              "type": "IWrapperRepository",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 33,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "IWrapperRepository",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setUrl",
          "args": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "url",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateData",
          "args": [
            {
              "name": "data",
              "type": "INewRepository",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "INewRepository",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {AngularFirestore, AngularFirestoreCollection} from \"@angular/fire/compat/firestore\";\nimport {INewRepository, IWrapperRepository} from \"../../interfaces\";\nimport {map} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectionService {\n  private _data: string\n  private _dbPath = '/repository'\n  repositoryRef: AngularFirestoreCollection<any>\n\n  constructor(private db: AngularFirestore) {\n    this.repositoryRef = db.collection(this._dbPath)\n  }\n\n  get data() {\n    return this.repositoryRef\n  }\n\n  setUrl(url: string) {\n    this.repositoryRef = this.db.collection(url)\n    this._dbPath = url\n  }\n\n  updateData(data: INewRepository){\n    this._dbPath = '/templateff'\n\n    return this.db.collection(this._dbPath).add(data).then(resp => resp)\n  }\n\n  createRepository(data: IWrapperRepository){\n    this._dbPath = '/repositoryNew'\n\n    return this.db.collection(this._dbPath).add(data).then(resp => resp)\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "db",
            "type": "AngularFirestore",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "db",
            "type": "AngularFirestore",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "data": {
          "name": "data",
          "getSignature": {
            "name": "data",
            "type": "",
            "returnType": "",
            "line": 18
          }
        }
      },
      "type": "injectable"
    },
    {
      "name": "DataTableService",
      "id": "injectable-DataTableService-6ee7a352c8acc6cf2ccc8e72cc57d443",
      "file": "src/app/shared/utils/services/data-table/data-table.service.ts",
      "properties": [
        {
          "name": "_dataStoreBehavior",
          "defaultValue": "new BehaviorSubject<any>([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<any>",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [121]
        },
        {
          "name": "dataStore$",
          "defaultValue": "this._dataStoreBehavior.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methods": [
        {
          "name": "dataStoreBehavior",
          "args": [
            {
              "name": "data",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataTableService {\n\n  private _dataStoreBehavior: BehaviorSubject<any> = new BehaviorSubject<any>([])\n  dataStore$ = this._dataStoreBehavior.asObservable()\n\n  constructor(private _httpClient: HttpClient) {\n  }\n\n  dataStoreBehavior(data: string) {\n    return this._httpClient.get(data).subscribe(resp => {\n          this._dataStoreBehavior.next(resp)\n    })\n  }\n\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_httpClient",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "_httpClient",
            "type": "HttpClient",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "GlobalErrorHandleService",
      "id": "injectable-GlobalErrorHandleService-ddb179bb87e08951f61fd2ce3acd7eaf",
      "file": "src/app/shared/utils/services/abstract/global-error-handle.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "handleError",
          "args": [
            {
              "name": "error",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 10,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "error",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable, Injector} from \"@angular/core\";\nimport {Router} from \"@angular/router\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\n\n@Injectable()\nexport class GlobalErrorHandleService {\n\n  constructor(private _injectable: Injector) { }\n\n  handleError(error: any){\n    const routerProperty =  this._injectable.get(Router)\n    console.warn(`${routerProperty.url}`)\n\n    if (error instanceof HttpErrorResponse){\n      console.log(`Error from backend ${error.status}`)\n      console.log(`Response body ${error.message}`)\n    }else{\n      console.warn(`An error occurred ${error.message}`)\n    }\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_injectable",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 6,
        "jsdoctags": [
          {
            "name": "_injectable",
            "type": "Injector",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "LocalStorageDataService",
      "id": "injectable-LocalStorageDataService-52013459adaf4ce68d774447a1fe2ed8",
      "file": "src/app/shared/utils/services/abstract/local-storage-data.service.ts",
      "properties": [],
      "methods": [
        {
          "name": "clearAllValue",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "deleteResource",
          "args": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getResource",
          "args": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string | null",
          "typeParameters": [],
          "line": 11,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setResource",
          "args": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "key",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocalStorageDataService {\n\n  constructor() {\n  }\n\n  getResource(key: string) : string | null{\n    return localStorage.getItem(key)\n  }\n\n  setResource(key: string, value:any){\n    localStorage.setItem(key, value)\n  }\n\n  deleteResource(key: string) {\n    return localStorage.removeItem(key)\n  }\n\n  clearAllValue(){\n    return localStorage.clear()\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 6
      },
      "type": "injectable"
    },
    {
      "name": "NewRepositoryService",
      "id": "injectable-NewRepositoryService-402dd19cfe7c2ac70f173c6b046e15c0",
      "file": "src/app/shared/utils/services/newRepository/new-repository.service.ts",
      "properties": [
        {
          "name": "_newRepo",
          "defaultValue": "new BehaviorSubject<INewRepository[]>([])",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<INewRepository[]>",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [121]
        },
        {
          "name": "newRepo$",
          "defaultValue": "this._newRepo.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methods": [
        {
          "name": "newRepoRetriveData",
          "args": [
            {
              "name": "data",
              "type": "INewRepository[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "INewRepository[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {INewRepository} from \"../../interfaces\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewRepositoryService {\n\n  private _newRepo: BehaviorSubject<INewRepository[]> = new BehaviorSubject<INewRepository[]>([])\n  newRepo$ = this._newRepo.asObservable()\n\n  constructor() { }\n\n  newRepoRetriveData(data:INewRepository[]){\n    this._newRepo.next(data)\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 11
      },
      "type": "injectable"
    },
    {
      "name": "OverlayPopUpRef",
      "id": "injectable-OverlayPopUpRef-910bf23d13ea5b85d5c42cc0b990270f",
      "file": "src/app/shared/utils/services/overlay/overlay-pop-up.ref.ts",
      "properties": [],
      "methods": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 10,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {OverlayRef} from \"@angular/cdk/overlay\";\nimport {Injectable} from \"@angular/core\";\n@Injectable({\n  providedIn: 'root'\n})\nexport class OverlayPopUpRef {\n  constructor(private _overlayRef: OverlayRef) {\n  }\n\n  close() {\n    this._overlayRef.dispose()\n    this._overlayRef.detach()\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_overlayRef",
            "type": "OverlayRef",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 6,
        "jsdoctags": [
          {
            "name": "_overlayRef",
            "type": "OverlayRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "OverlayPopUpService",
      "id": "injectable-OverlayPopUpService-65f3c749c9a53cb48c917db217ed2b3c",
      "file": "src/app/shared/utils/services/overlay/overlay-pop-up.service.ts",
      "properties": [
        {
          "name": "dialogRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "filePortal",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "overlayRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 25
        }
      ],
      "methods": [
        {
          "name": "closeOverlay",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "createOverlay",
          "args": [
            {
              "name": "config",
              "type": "IDialoConfig",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "config",
              "type": "IDialoConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getOverlayConfig",
          "args": [
            {
              "name": "config",
              "type": "IDialoConfig",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 51,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "config",
              "type": "IDialoConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "open",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "config",
              "type": "IDialoConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}"
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "config",
              "type": "IDialoConfig",
              "deprecated": false,
              "deprecationMessage": "",
              "defaultValue": "{}",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {Overlay, OverlayConfig} from \"@angular/cdk/overlay\";\nimport {ComponentPortal} from \"@angular/cdk/portal\";\nimport {PopUpLoginComponent} from \"../../../../module/header/pop-up-login/pop-up-login.component\";\nimport {OverlayPopUpRef} from \"./overlay-pop-up.ref\";\n\ninterface IDialoConfig {\n  panelClass?: string\n  hasBackdrop?: boolean\n  backdropClass?: string\n}\n\nconst DEFAULT_CONFIG: IDialoConfig = {\n  hasBackdrop: true,\n  backdropClass: 'dark-backdrop',\n  panelClass: 'elixir-dialog-panel'\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OverlayPopUpService {\n\n  dialogRef: any\n  overlayRef: any\n  filePortal: any\n\n  constructor(private _overlay: Overlay) {\n  }\n\n  open(event: MouseEvent, config: IDialoConfig = {}) {\n    const dialogConfig = {...DEFAULT_CONFIG, ...config}\n    this.overlayRef = this.createOverlay(dialogConfig, event)\n    this.dialogRef = new OverlayPopUpRef(this.overlayRef)\n    this.filePortal = new ComponentPortal(PopUpLoginComponent)\n    this.overlayRef.attach(this.filePortal)\n\n    this.overlayRef.backdropClick().subscribe((_: any) => this.dialogRef.close())\n    return this.overlayRef\n  }\n\n  closeOverlay() {\n    this.dialogRef.close()\n  }\n\n  private createOverlay(config: IDialoConfig, event: MouseEvent) {\n    const overlayConfig = this.getOverlayConfig(config, event)\n    return this._overlay.create(overlayConfig)\n  }\n\n  private getOverlayConfig(config: IDialoConfig, event: MouseEvent) {\n    const positionStrategy = this._overlay.position().global().left(event.clientX - 176 + 'px')\n      .top((event.clientY + 3) + 'px')\n\n    const overlayConfig = new OverlayConfig({\n      hasBackdrop: config.hasBackdrop,\n      backdropClass: config.backdropClass,\n      panelClass: config.panelClass,\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy\n    })\n    return overlayConfig\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_overlay",
            "type": "Overlay",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "_overlay",
            "type": "Overlay",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "OverlayService",
      "id": "injectable-OverlayService-6e1ba64d5df120bd667b6d5b498155d4",
      "file": "src/app/shared/utils/services/overlay/overlay.service.ts",
      "properties": [
        {
          "name": "component",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ComponentPortal<any>",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [121]
        },
        {
          "name": "overlayRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "closeOverlay",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "display",
          "args": [
            {
              "name": "element",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "exampleOverlayComponent",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "element",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "exampleOverlayComponent",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {Overlay} from \"@angular/cdk/overlay\";\nimport {ComponentPortal} from \"@angular/cdk/portal\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OverlayService {\n  private overlayRef: any;\n  private component: ComponentPortal<any>\n\n  constructor(private _ovelay: Overlay) {\n  }\n\n  display(element: any, exampleOverlayComponent: any) {\n    const target = element\n    this.overlayRef = this._ovelay.create({\n      hasBackdrop: true,\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      panelClass: 'vorkurt-overlay',\n      positionStrategy: this._ovelay.position()\n        .flexibleConnectedTo(target)\n        .withPositions([\n          {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top',\n          },\n          {\n            originX: 'center',\n            originY: 'top',\n            overlayX: 'end',\n            overlayY: 'bottom',\n          },\n          {\n            originX: 'end',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'top',\n          },\n          {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'end',\n            overlayY: 'top',\n          },\n        ]),\n    })\n    this.component = new ComponentPortal(exampleOverlayComponent);\n    this.overlayRef.attach(this.component);\n    this.overlayRef.backdropClick().subscribe(() => {\n      this.overlayRef.detach()\n      this.overlayRef.dispose()\n    });\n  }\n\n  closeOverlay() {\n    this.overlayRef.detach()\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_ovelay",
            "type": "Overlay",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "_ovelay",
            "type": "Overlay",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    },
    {
      "name": "PopUpStateService",
      "id": "injectable-PopUpStateService-988dbe1c6d0ce2907a89a4f04e5f11ea",
      "file": "src/app/module/header/pop-up-login/pop-up-state.service.ts",
      "properties": [
        {
          "name": "_coordinates",
          "defaultValue": "new Subject<IOffsetPopUp>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<IOffsetPopUp>",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [121]
        },
        {
          "name": "_statePopUpLogin",
          "defaultValue": "new BehaviorSubject<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<boolean>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [121]
        },
        {
          "name": "coordinates$",
          "defaultValue": "this._coordinates.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "statePopUp$",
          "defaultValue": "this._statePopUpLogin.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 14
        }
      ],
      "methods": [
        {
          "name": "coordinates",
          "args": [
            {
              "name": "value",
              "type": "IOffsetPopUp",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "IOffsetPopUp",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "statePopLogin",
          "args": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Subject} from \"rxjs\";\n\nexport interface IOffsetPopUp {\n  offsetX: number,\n  offsetY: number\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PopUpStateService {\n  private _statePopUpLogin: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false)\n  statePopUp$ = this._statePopUpLogin.asObservable()\n\n  private _coordinates: Subject<IOffsetPopUp> = new Subject<IOffsetPopUp>()\n  coordinates$ = this._coordinates.asObservable()\n\n  coordinates(value: IOffsetPopUp) {\n    this._coordinates.next(value)\n  }\n\n  statePopLogin(value: boolean) {\n    this._statePopUpLogin.next(value)\n  }\n}\n",
      "type": "injectable"
    },
    {
      "name": "SpinnerStateService",
      "id": "injectable-SpinnerStateService-5ef634fa7168acb2533d0a29312129a2",
      "file": "src/app/shared/spinner/spinner-state.service.ts",
      "properties": [
        {
          "name": "_stateSpiner",
          "defaultValue": "new BehaviorSubject<boolean>(false)",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<boolean>",
          "optional": false,
          "description": "",
          "line": 8,
          "modifierKind": [121]
        },
        {
          "name": "getState$",
          "defaultValue": "this._stateSpiner.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methods": [
        {
          "name": "setStateBehaviorSpinner",
          "args": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 15,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "value",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpinnerStateService {\n  private _stateSpiner : BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false)\n\n  constructor() {\n  }\n\n  getState$ = this._stateSpiner.asObservable()\n\n  setStateBehaviorSpinner(value: boolean){\n    this._stateSpiner.next(value)\n  }\n\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "type": "injectable"
    },
    {
      "name": "TemplateRepositoryService",
      "id": "injectable-TemplateRepositoryService-a688b0643a4b046ff91e0dc2c33f5f8f",
      "file": "src/app/shared/utils/services/newRepository/template-repository/template-repository.service.ts",
      "properties": [
        {
          "name": "_templateData",
          "defaultValue": "new Subject<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<string>",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [121]
        },
        {
          "name": "_templateDescription",
          "defaultValue": "new Subject<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<string>",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [121]
        },
        {
          "name": "_templateRepository",
          "defaultValue": "new Subject<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [121]
        },
        {
          "name": "_templateRepositoryName",
          "defaultValue": "new Subject<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<string>",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [121]
        },
        {
          "name": "_templateUserName",
          "defaultValue": "new Subject<string>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<string>",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [121]
        },
        {
          "name": "templateData$",
          "defaultValue": "this._templateData.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "templateDescription$",
          "defaultValue": "this._templateDescription.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "templateRepositoryAvailable$",
          "defaultValue": "this._templateRepository.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 21
        },
        {
          "name": "templateRepositoryName$",
          "defaultValue": "this._templateRepositoryName.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "templateUserName$",
          "defaultValue": "this._templateUserName.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 18
        }
      ],
      "methods": [
        {
          "name": "sendDataOnObservable",
          "args": [
            {
              "name": "data",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "sendDescriptionNameOnObservable",
          "args": [
            {
              "name": "data",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "sendRepositoryAvailableOnObservable",
          "args": [
            {
              "name": "data",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "sendRepositoryNameOnObservable",
          "args": [
            {
              "name": "data",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "sendUserNameOnObservable",
          "args": [
            {
              "name": "data",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "data",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport {Subject} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TemplateRepositoryService {\n\n  private _templateData: Subject<string> = new Subject<string>()\n  private _templateUserName: Subject<string> = new Subject<string>()\n  private _templateRepositoryName: Subject<string> = new Subject<string>()\n  private _templateDescription: Subject<string> = new Subject<string>()\n  private _templateRepository: Subject<boolean> = new Subject<boolean>()\n\n  constructor() { }\n\n  templateData$ = this._templateData.asObservable()\n  templateUserName$ = this._templateUserName.asObservable()\n  templateRepositoryName$ = this._templateRepositoryName.asObservable()\n  templateDescription$ = this._templateDescription.asObservable()\n  templateRepositoryAvailable$ = this._templateRepository.asObservable()\n\n  sendDataOnObservable(data: string){\n    this._templateData.next(data)\n  }\n\n  sendUserNameOnObservable(data: string){\n    this._templateUserName.next(data)\n  }\n\n  sendRepositoryNameOnObservable(data: string){\n    this._templateRepositoryName.next(data)\n  }\n\n  sendDescriptionNameOnObservable(data: string){\n    this._templateDescription.next(data)\n  }\n\n  sendRepositoryAvailableOnObservable(data: boolean){\n    this._templateRepository.next(data)\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 13
      },
      "type": "injectable"
    },
    {
      "name": "TimerService",
      "id": "injectable-TimerService-09a954e39ce47baef2d3b6bd2b5690aa",
      "file": "src/app/shared/utils/services/timer/timer.service.ts",
      "properties": [
        {
          "name": "_counterData",
          "defaultValue": "new BehaviorSubject<ITimer[]>(new Array<ITimer>())",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "BehaviorSubject<ITimer[]>",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [121]
        },
        {
          "name": "counterData$",
          "defaultValue": "this._counterData.asObservable()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "timerArray",
          "defaultValue": "new Array<ITimer>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Array<ITimer>",
          "optional": false,
          "description": "",
          "line": 9
        }
      ],
      "methods": [
        {
          "name": "sendCounterData",
          "args": [
            {
              "name": "timer",
              "type": "ITimer",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "timer",
              "type": "ITimer",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from \"rxjs\";\nimport {ITimer} from \"../../interfaces\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimerService {\n  timerArray: Array<ITimer> = new Array<ITimer>()\n  private _counterData: BehaviorSubject<ITimer[]> = new BehaviorSubject<ITimer[]>(new Array<ITimer>())\n  counterData$ = this._counterData.asObservable()\n\n  constructor() {\n  }\n\n  sendCounterData(timer: ITimer) {\n    timer.id = this.timerArray.length === 0 ? 1 : this.timerArray.length + 1\n    this.timerArray.push(timer)\n    this._counterData.next(this.timerArray)\n  }\n\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 11
      },
      "type": "injectable"
    },
    {
      "name": "UserService",
      "id": "injectable-UserService-ee2d0dcf59dcd9936b7c29a9f13f2aff",
      "file": "src/app/shared/utils/services/user/user-service.ts",
      "properties": [],
      "methods": [
        {
          "name": "clearLocalStorage",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "getUserLoggedIn",
          "args": [],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "setUserLoggedIn",
          "args": [
            {
              "name": "user",
              "type": "User | any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 13,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "user",
              "type": "User | any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {User} from \"../../interfaces/user/user\";\nimport {LocalStorageDataService} from \"../abstract/local-storage-data.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private _localStorage: LocalStorageDataService) {\n  }\n\n  setUserLoggedIn(user: User | any) {\n    this._localStorage.setResource('user', JSON.stringify(user))\n  }\n\n  getUserLoggedIn() {\n    if (localStorage.getItem('user')) {\n      return JSON.parse(<string>this._localStorage.getResource('user'))\n    } else {\n      console.log('local storage is empty')\n      return null\n    }\n  }\n\n  clearLocalStorage() {\n    this._localStorage.clearAllValue()\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_localStorage",
            "type": "LocalStorageDataService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "_localStorage",
            "type": "LocalStorageDataService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "injectable"
    }
  ],
  "guards": [
    {
      "name": "AccountResolver",
      "id": "injectable-AccountResolver-37b197ed8b10a9d7ae06e0c0c9b2c4c7",
      "file": "src/app/shared/utils/services/resolvers/account/account.resolver.ts",
      "properties": [],
      "methods": [
        {
          "name": "resolve",
          "args": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport {ConnectionService} from \"../../firebase/connection.service\";\nimport {AccountService} from \"../../account/account.service\";\nimport {map} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountResolver implements Resolve<boolean> {\n\n  constructor(private _firebase : ConnectionService, private _accountService: AccountService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): any {\n    this._firebase.setUrl('/repository')\n\n    this._firebase.data.snapshotChanges()\n      .pipe(map(changeData => changeData\n        .map(c => {\n          let a = c.payload.doc.data();\n          return {\n            owner: a.owner,\n            repo:\n              a.repo,\n            link: a.link,\n            id: c.payload.doc.id\n          }\n        }))).subscribe(data => this._accountService.repoData(data))\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_firebase",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_accountService",
            "type": "AccountService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "_firebase",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_accountService",
            "type": "AccountService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "guard"
    },
    {
      "name": "AuthGuardGuard",
      "id": "injectable-AuthGuardGuard-834075619f0e027b6255e043d0531a05",
      "file": "src/app/shared/utils/services/guards/auth-guard.guard.ts",
      "properties": [],
      "methods": [
        {
          "name": "canActivate",
          "args": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Promise<boolean | UrlTree>",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [130],
          "jsdoctags": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {AngularFireAuth} from \"@angular/fire/compat/auth\";\nimport {UserService} from \"../user/user-service\";\nimport {SpinnerStateService} from \"../../../spinner/spinner-state.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardGuard implements CanActivate {\n\n  constructor(private _firebaseAuth: AngularFireAuth,\n              private _sppinerService: SpinnerStateService,\n              private _userService: UserService,\n              private _route: Router) {\n  }\n\n  async canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Promise<boolean | UrlTree> {\n    const user = await this._firebaseAuth.currentUser\n    let isAuthenticated = user ? true : false\n    const dataFromLocalStorage = this._userService.getUserLoggedIn()\n\n    if (dataFromLocalStorage) {\n      isAuthenticated = true\n    }\n\n    if (!isAuthenticated) {\n      console.warn('You must be authenticated in order to access this page.')\n\n      await this._route.navigate(['/auth/test'])\n    }\n    this._sppinerService.setStateBehaviorSpinner(false)\n\n    return isAuthenticated\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_firebaseAuth",
            "type": "AngularFireAuth",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_sppinerService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_userService",
            "type": "UserService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_route",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 10,
        "jsdoctags": [
          {
            "name": "_firebaseAuth",
            "type": "AngularFireAuth",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_sppinerService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_userService",
            "type": "UserService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_route",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "guard"
    },
    {
      "name": "NewRepositoryResolver",
      "id": "injectable-NewRepositoryResolver-b5d98131dcaace02cd706380cdf133a5",
      "file": "src/app/shared/utils/services/resolvers/newRepository/new-repository.resolver.ts",
      "properties": [],
      "methods": [
        {
          "name": "resolve",
          "args": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport {ConnectionService} from \"../../firebase/connection.service\";\nimport {NewRepositoryService} from \"../../newRepository/new-repository.service\";\nimport {map} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewRepositoryResolver implements Resolve<boolean> {\n\n  constructor(private _firebase: ConnectionService, private _newRepository: NewRepositoryService) {\n    this._firebase.setUrl('/template')\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): any{\n    this._firebase.setUrl('/template')\n\n    this._firebase.data.snapshotChanges()\n      .pipe(map(changeData => changeData\n        .map(c => {\n          let a = c.payload.doc.data();\n          return {\n            template: a.template,\n            id: c.payload.doc.id,\n            check: a.check,\n            icon: a.icon\n          }\n        }))).subscribe(data => this._newRepository.newRepoRetriveData(data))\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_firebase",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_newRepository",
            "type": "NewRepositoryService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "_firebase",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_newRepository",
            "type": "NewRepositoryService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "guard"
    },
    {
      "name": "TableDataResolver",
      "id": "injectable-TableDataResolver-163376af1b458dec2f67defa9a41707f",
      "file": "src/app/shared/utils/services/resolvers/table/table-data.resolver.ts",
      "properties": [],
      "methods": [
        {
          "name": "resolve",
          "args": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Observable<any>",
          "typeParameters": [],
          "line": 14,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "route",
              "type": "ActivatedRouteSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "state",
              "type": "RouterStateSnapshot",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from '@angular/router';\nimport {Observable, of} from 'rxjs';\nimport {DataTableService} from \"../../data-table/data-table.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableDataResolver implements Resolve<boolean> {\n\n  constructor(private _dataTableService: DataTableService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> {\n    return of(this._dataTableService.dataStoreBehavior('https://www.ag-grid.com/example-assets/olympic-winners.json'))\n  }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_dataTableService",
            "type": "DataTableService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 9,
        "jsdoctags": [
          {
            "name": "_dataTableService",
            "type": "DataTableService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "type": "guard"
    }
  ],
  "interceptors": [],
  "classes": [],
  "directives": [
    {
      "name": "ElixDragDirective",
      "id": "directive-ElixDragDirective-ebd554b0eddf582678f68ac106d1561a",
      "file": "src/app/shared/utils/directive/elix-drag.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {Directive, ElementRef, HostListener, Input, OnInit, Renderer2} from '@angular/core';\n\n@Directive({\n  selector: '[elixElixDrag]'\n})\nexport class ElixDragDirective implements OnInit{\n  @Input() defaultColor : string = 'transparent'\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    const self = this;\n\n    function preventSeePointerWhenResize() {\n      document.body.style.pointerEvents = 'none';\n    }\n\n    function setPointerAfterResize() {\n      document.body.style.pointerEvents = 'auto';\n    }\n\n\n    const newWidth = (wid: number) => {\n      const newWidth = Math.max(this.resizableMinWidth, wid);\n      _elementRef.nativeElement.style.width = (newWidth) + \"px\";\n    }\n\n\n    const mouseMoveG = (evt: MouseEvent) => {\n      if (!this.dragging) {\n        return;\n      }\n      newWidth(evt.clientX + _elementRef.nativeElement.offsetLeft)\n      evt.stopPropagation();\n    };\n\n\n    const mouseUpG = (evt: MouseEvent) => {\n      if (!this.dragging) {\n        return;\n      }\n      setPointerAfterResize();\n      this.dragging = false;\n      evt.stopPropagation();\n    };\n\n    const mouseDown = (evt: MouseEvent) => {\n      if (this.inDragRegion(evt)) {\n        this.dragging = true;\n        preventSeePointerWhenResize();\n        evt.stopPropagation();\n      }\n    };\n\n\n    const mouseMove = (evt: any) => {\n      if (this.inDragRegion(evt) || this.dragging) {\n        _elementRef.nativeElement.style.cursor = \"col-resize\";\n      } else {\n        _elementRef.nativeElement.style.cursor = \"default\";\n      }\n    }\n\n\n    document.addEventListener('mousemove', mouseMoveG, true);\n    document.addEventListener('mouseup', mouseUpG, true);\n    _elementRef.nativeElement.addEventListener('mousedown', mouseDown, true);\n    _elementRef.nativeElement.addEventListener('mousemove', mouseMove, true);\n  }\n\n  @Input() resizableGrabWidth = 8;\n  @Input() resizableMinWidth = 10;\n\n  dragging = false;\n  ngOnInit(): void {\n  }\n\n  inDragRegion(evt: MouseEvent): boolean {\n    return this._elementRef.nativeElement.clientWidth - evt.clientX + this._elementRef.nativeElement.offsetLeft < this.resizableGrabWidth;\n  }\n}\n",
      "selector": "[elixElixDrag]",
      "providers": [],
      "inputsClass": [
        {
          "name": "defaultColor",
          "defaultValue": "'transparent'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 7,
          "type": "string"
        },
        {
          "name": "resizableGrabWidth",
          "defaultValue": "8",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "number"
        },
        {
          "name": "resizableMinWidth",
          "defaultValue": "10",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "number"
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "dragging",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 72
        }
      ],
      "methodsClass": [
        {
          "name": "inDragRegion",
          "args": [
            {
              "name": "evt",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 76,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "evt",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 73,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "implements": ["OnInit"],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 7,
        "jsdoctags": [
          {
            "name": "_elementRef",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_renderer",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    }
  ],
  "components": [
    {
      "name": "AccountComponent",
      "id": "component-AccountComponent-de930499302faeedf138c2fcaaa46baf",
      "file": "src/app/module/account/account.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-account",
      "styleUrls": ["./account.component.scss"],
      "styles": [],
      "templateUrl": ["./account.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'elix-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.scss']\n})\nexport class AccountComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".vorkurt__border-right{\n  border-right: solid 0.5px\n}\n\n.vorkurt__border-left{\n  border-left: solid 0.5px\n}\n\n",
          "styleUrl": "./account.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"vorkurt__height-account\">\n  <div class=\"flex vorkurt__background-primary h-full \">\n    <div class=\"vorkurt__border-right vorkurt__color-text-line vorkurt__background-secondary w-1/5\">\n      <elix-left-side-repo></elix-left-side-repo>\n    </div>\n    <div class=\"pt-2 text-white vorkurt__background-primary w-1/2\">\n      <elix-center-activity class=\"flex justify-center\"></elix-center-activity>\n    </div>\n    <div class=\"vorkurt__background-primary pt-2 w-1/4 vorkurt__border-left  vorkurt__color-text-line\">\n      <elix-right-side-artifacts></elix-right-side-artifacts>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "AppComponent",
      "id": "component-AppComponent-27814498f4041580b3e3c1c87632643d",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": ["./app.component.scss"],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "stateSpiner",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "title",
          "defaultValue": "'vorkurt'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "unSubscriptionscrollBar",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subscription",
          "optional": false,
          "description": "",
          "line": 15
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {SpinnerStateService} from \"./shared/spinner/spinner-state.service\";\nimport {NavigationEnd, Router} from \"@angular/router\";\nimport {Subscription} from \"rxjs\";\nimport {filter} from \"rxjs/operators\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  title = 'vorkurt';\n  stateSpiner: boolean = false\n  unSubscriptionscrollBar: Subscription\n\n  constructor(private _spinerService: SpinnerStateService, private _router: Router) {\n    this._spinerService.getState$.subscribe(resp => this.stateSpiner = resp)\n  }\n\n  ngOnInit(): void {\n    this.unSubscriptionscrollBar = this._router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .subscribe(res => window.scrollTo(0, 0))\n  }\n\n  ngOnDestroy(): void {\n    this.unSubscriptionscrollBar.unsubscribe()\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./app.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_spinerService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 15,
        "jsdoctags": [
          {
            "name": "_spinerService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<elix-spinner></elix-spinner>\n<router-outlet *ngIf=\"!stateSpiner\"></router-outlet>\n"
    },
    {
      "name": "AuthComponent",
      "id": "component-AuthComponent-8d9fabf59376fba93c3643cc37a07e52",
      "file": "src/app/auth/auth.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-auth",
      "styleUrls": ["./auth.component.scss"],
      "styles": [],
      "templateUrl": ["./auth.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_regexEmail",
          "defaultValue": "/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [121]
        },
        {
          "name": "feedback",
          "defaultValue": "{password: false, email: false}",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "isSignedIn",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "logedIn",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 15
        }
      ],
      "methodsClass": [
        {
          "name": "changeSignIn",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [
            {
              "name": "form",
              "type": "NgForm",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "form",
              "type": "NgForm",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {NgForm} from \"@angular/forms\";\nimport {AuthService} from \"../shared/utils/services\";\nimport {Router} from \"@angular/router\";\nimport {SpinnerStateService} from \"../shared/spinner/spinner-state.service\";\nimport {throwError} from \"rxjs\";\n\n@Component({\n  selector: 'elix-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit {\n  isSignedIn = false\n  logedIn = true\n  feedback = {password: false, email: false}\n  private _regexEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  constructor(private _authService: AuthService,\n              private router: Router,\n              private _sppinerService: SpinnerStateService) {\n  }\n\n  ngOnInit(): void {\n    this._sppinerService.setStateBehaviorSpinner(false)\n\n    if (localStorage.getItem('user') !== null) {\n      this.isSignedIn = true\n    } else {\n      this.isSignedIn = false\n    }\n  }\n\n  onSubmit(form: NgForm) {\n    this.feedback.password = false\n    this.feedback.email = false\n    try {\n\n\n      if (this._regexEmail.test(String(\n        form.value.email).toLowerCase()) && String(form.value.password).length >= 6) {\n        this._sppinerService.setStateBehaviorSpinner(true)\n        if (this.logedIn) {\n          this._authService.signInWithEmail(form.value).then((resp: any) => {\n          })\n        } else {\n          this._authService.signUp(form.value).catch(e => {\n            console.log(e)\n            return e\n          })\n        }\n        form.reset()\n      } else {\n        this.feedback.email = true\n        this.feedback.password = true\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  changeSignIn() {\n    this.logedIn = !this.logedIn\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".elix__height{\n  height: 94%;\n}\n",
          "styleUrl": "./auth.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_authService",
            "type": "AuthService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_sppinerService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "_authService",
            "type": "AuthService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "router",
            "type": "Router",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_sppinerService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"h-full\" *ngIf=\"!isSignedIn\">\n  <div class=\"flex\">\n\n    <div class=\"flex flex-1 justify-end ml-20 pt-3\">\n      <h1 class=\"text-white text-9xl \">{{!logedIn ? 'Create' : 'Logged'}}</h1>\n    </div>\n    <div class=\"flex flex-1 justify-end\">\n      <button mat-ripple\n              class=\"bg-white hover:border-2 hover:bg-blue-100 rounded-md text-white pr-3 pl-3 pb-2 pt-2 text-blue-900 mt-3 mr-3\"\n              (click)=\"changeSignIn()\">{{logedIn ? 'Sign Up' : 'Sign In'}}</button>\n    </div>\n  </div>\n  <div class=\"flex justify-center items-center elix__height\">\n    <form #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\">\n      <div class=\"flex-col mt-3 mb-8\">\n        <div>\n          <h1 class=\"text-white text-4xl\">Username</h1>\n          <input type=\"email\" ngModel name=\"email\" required>\n        </div>\n        <span *ngIf=\"feedback.email\" class=\"text-red-600 absolute my-1\"> * email is not valid</span>\n      </div>\n      <div class=\"flex-col mt-3 mb-8\">\n        <div>\n          <h1 class=\"text-white text-4xl\">Password</h1>\n          <input type=\"password\" minlength=\"6\" ngModel name=\"password\" required>\n        </div>\n        <span *ngIf=\"feedback.password\" class=\"text-red-600 absolute my-1\"> * Password to short</span>\n      </div>\n      <div class=\"flex justify-end items-center mt-3\">\n        <button class=\"bg-blue-400 hover:border-2 hover:bg-blue-700 rounded-md text-white pr-3 pl-3 pb-2 pt-2\"\n                [disabled]=\"!authForm\"\n                type=\"submit\">\n          {{!logedIn ? 'Sign Up' : 'Sign In'}}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n"
    },
    {
      "name": "BottomComponent",
      "id": "component-BottomComponent-354f23a65e2920602bee58a7b5e0f6ea",
      "file": "src/app/module/newRepo/bottom/bottom.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-bottom",
      "styleUrls": ["./bottom.component.scss"],
      "styles": [],
      "templateUrl": ["./bottom.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "available",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [121]
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [121]
        },
        {
          "name": "owner",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13,
          "modifierKind": [121]
        },
        {
          "name": "repositoryName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [121]
        },
        {
          "name": "template",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 12,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onSubmit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {TemplateRepositoryService} from \"../../../shared/utils/services/newRepository/template-repository/template-repository.service\";\nimport {ConnectionService} from \"../../../shared/utils/services/firebase/connection.service\";\nimport {IWrapperRepository} from \"../../../shared/utils/interfaces\";\n\n@Component({\n  selector: 'elix-bottom',\n  templateUrl: './bottom.component.html',\n  styleUrls: ['./bottom.component.scss']\n})\nexport class BottomComponent implements OnInit {\n  private template: string;\n  private owner: string;\n  private repositoryName: string\n  private description: string\n  private available: boolean\n\n  constructor(private _templateRepository: TemplateRepositoryService, private _connectionServiceFirebase: ConnectionService) {\n  }\n\n  ngOnInit(): void {\n    this._templateRepository.templateUserName$.subscribe(resp => this.owner = resp)\n    this._templateRepository.templateData$.subscribe(resp => this.template = resp)\n    this._templateRepository.templateRepositoryName$.subscribe(resp => this.repositoryName = resp)\n    this._templateRepository.templateDescription$.subscribe(resp => this.description = resp)\n    this._templateRepository.templateRepositoryAvailable$.subscribe(resp => this.available = resp)\n  }\n\n  onSubmit() {\n    let newRepo = {\n      template: this.template ?? '',\n      owner: this.owner ?? '',\n      repositoryName: this.repositoryName ?? '',\n      description: this.description ?? '',\n      available: this.available ?? false\n    } as IWrapperRepository\n\n    this._connectionServiceFirebase.createRepository(newRepo).then(resp => console.log(resp))\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./bottom.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_templateRepository",
            "type": "TemplateRepositoryService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_connectionServiceFirebase",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "_templateRepository",
            "type": "TemplateRepositoryService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_connectionServiceFirebase",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"text-base vorkurt__border-bottom mb-6\">\n  <div>\n    <div class=\"font-bold flex flex-col\">\n      <span>Initialize this repository with:</span>\n    </div>\n    <div class=\"text-sm vorkurt__color-text-line\">\n      <span>Skip this step if you’re importing an existing repository.</span>\n    </div>\n    <div>\n      <mat-checkbox class=\"example-margin my-3\">\n        <div class=\"flex\">\n          <div class=\"flex flex-col\">\n            <span class=\"h-3 text-base mb-2\">\n               Add a README file\n            </span>\n            <span>\n              This is where you can write a long description for your project. Learn more.\n            </span>\n          </div>\n        </div>\n      </mat-checkbox>\n    </div>\n    <div>\n      <mat-checkbox class=\"example-margin my-3\">\n        <div class=\"flex\">\n          <div class=\"flex flex-col\">\n            <span class=\"h-3 text-base mb-2\">\n               Add .gitignore\n            </span>\n            <span>\n              Choose which files not to track from a list of templates. Learn more.\n            </span>\n          </div>\n        </div>\n      </mat-checkbox>\n    </div>\n    <div>\n      <mat-checkbox class=\"example-margin my-3\">\n        <div class=\"flex\">\n          <div class=\"flex flex-col\">\n            <span class=\"h-3 text-base mb-2\">\n               Choose a license\n            </span>\n            <span>\n              A license tells others what they can and can't do with your code. Learn more.\n            </span>\n          </div>\n        </div>\n      </mat-checkbox>\n    </div>\n  </div>\n  <div>\n    <div>\n      <span>\n        This will set  main as the default branch. Change the default name in your settings.\n      </span>\n    </div>\n  </div>\n</div>\n<div\n  class=\"mb-6 flex h-7 items-center justify-center vorkurt__background-button w-1/4 rounded-lg ml-2 mr-2 cursor-pointer\">\n  <button class=\"flex justify-center vorkurt__background-button\">\n    <div class=\"ml-2\" (click)=\"onSubmit()\">\n      <span class=\"font-normal text-base\">Create Repository</span>\n    </div>\n  </button>\n</div>\n"
    },
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-617eae9d80f072a16f23156e8d20a7dc",
      "file": "src/stories/button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-button",
      "styleUrls": ["./button.css"],
      "styles": [],
      "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "backgroundColor",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "What background color to use",
          "description": "<p>What background color to use</p>\n",
          "line": 26,
          "type": "string"
        },
        {
          "name": "label",
          "defaultValue": "'Button'",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 709,
              "end": 722,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 322,
              "tagName": {
                "pos": 710,
                "end": 718,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "required"
              },
              "comment": ""
            }
          ],
          "rawdescription": "Button contents",
          "description": "<p>Button contents</p>\n",
          "line": 40,
          "type": "string"
        },
        {
          "name": "primary",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "Is this the principal call to action on the page?",
          "description": "<p>Is this the principal call to action on the page?</p>\n",
          "line": 20,
          "type": "boolean"
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "How large should the button be?",
          "description": "<p>How large should the button be?</p>\n",
          "line": 32,
          "type": "\"small\" | \"medium\" | \"large\""
        }
      ],
      "outputsClass": [
        {
          "name": "onClick",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOptional click handler\n",
          "description": "<p>Optional click handler</p>\n",
          "line": 46,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
          "styleUrl": "./button.css"
        }
      ],
      "stylesData": "",
      "accessors": {
        "classes": {
          "name": "classes",
          "getSignature": {
            "name": "classes",
            "type": "[]",
            "returnType": "string[]",
            "line": 48
          }
        }
      }
    },
    {
      "name": "CenterActivityComponent",
      "id": "component-CenterActivityComponent-98d025e08afd364da8035ebadd6b57be",
      "file": "src/app/module/account/center-activity/center-activity.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-center-activity",
      "styleUrls": ["./center-activity.component.scss"],
      "styles": [],
      "templateUrl": ["./center-activity.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'elix-center-activity',\n  templateUrl: './center-activity.component.html',\n  styleUrls: ['./center-activity.component.scss']\n})\nexport class CenterActivityComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./center-activity.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"w-5/6\">\n  <elix-jumbotron [type]=\"'post'\" class=\"justify-center flex\">\n    <div post>\n      TEstssssssssssTEstssssssssssTEstssssssssss\n      TEstssssssssssTEstssssssssssTEstssssssssss\n      TEstssssssssssTEstssssssssssT Easdadasstssssssssss\n    </div>\n  </elix-jumbotron>\n</div>\n"
    },
    {
      "name": "CodeComponent",
      "id": "component-CodeComponent-def6a7a9a079328ff10664f376877154",
      "file": "src/app/module/repository/code/code.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-code",
      "styleUrls": ["./code.component.scss"],
      "styles": [],
      "templateUrl": ["./code.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'elix-code',\n  templateUrl: './code.component.html',\n  styleUrls: ['./code.component.scss']\n})\nexport class CodeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./code.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<p>code works!</p>\n"
    },
    {
      "name": "ElixJumbotronComponent",
      "id": "component-ElixJumbotronComponent-93be4d43f6ed53ef73802d40f4a57900",
      "file": "src/app/shared/component/jumbotron/elix-jumbotron.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-jumbotron",
      "styleUrls": ["./elix-jumbotron.component.scss"],
      "styles": [],
      "templateUrl": ["./elix-jumbotron.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "action",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 12,
          "type": "boolean"
        },
        {
          "name": "closeAction",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 10,
          "type": "boolean"
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 11,
          "type": "string"
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'elix-jumbotron',\n  templateUrl: './elix-jumbotron.component.html',\n  styleUrls: ['./elix-jumbotron.component.scss']\n})\nexport class ElixJumbotronComponent implements OnInit {\n\n  @Input() closeAction: boolean\n  @Input() title: string\n  @Input() action: boolean\n  //It's mandatory\n  @Input() type: string\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".elix__shared-border-color{\n  border-color: #444c56;\n  width: 100%;\n}\n",
          "styleUrl": "./elix-jumbotron.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 14
      },
      "implements": ["OnInit"],
      "templateData": "<div\n  class=\"vorkurt__color-background border-2 elix__shared-border-color border-solid rounded-lg mr-2 ml-2\">\n  <div class=\"pl-2 pr-2\" *ngIf=\"type === 'post'\">\n    <div class=\"flex\">\n      <div class=\"flex-1\">\n        <h1>TItle</h1>\n      </div>\n      <div>\n        Action\n      </div>\n    </div>\n    <div>\n      <ng-content select=\"[post]\"></ng-content>\n    </div>\n    <div>\n    </div>\n\n    <footer>\n      <div class=\"w-72\">\n        <div class=\"flex justify-between\">\n          <div>language</div>\n          <div> star</div>\n          <div>Update date</div>\n        </div>\n      </div>\n    </footer>\n  </div>\n\n  <div class=\"w-96 pl-2 pr-2\" *ngIf=\"type === 'template'\">\n    <div>\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "ElixSpinnerComponent",
      "id": "component-ElixSpinnerComponent-f7adb5e056b36bdf182551d63fe7f3fa",
      "file": "src/app/shared/spinner/elix-spinner.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-spinner",
      "styleUrls": ["./elix-spinner.component.scss"],
      "styles": [],
      "template": "<div *ngIf=\"showSppiner\" class=\"lds-hourglass flex justify-center items-center\"></div>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_showSppiner",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {SpinnerStateService} from \"./spinner-state.service\";\nimport {tap} from \"rxjs/operators\";\n\n@Component({\n  selector: 'elix-spinner',\n  template: '<div *ngIf=\"showSppiner\" class=\"lds-hourglass flex justify-center items-center\"></div>',\n  styleUrls: ['./elix-spinner.component.scss']\n})\nexport class ElixSpinnerComponent implements OnInit {\n  private _showSppiner: boolean\n\n  constructor(private _spinnerStateService: SpinnerStateService) {\n  }\n\n\n  get showSppiner(): boolean {\n    return this._showSppiner\n  }\n\n  ngOnInit(): void {\n    this._spinnerStateService.getState$\n      .pipe(tap((res) => console.log(res)))\n      .subscribe(resp => this._showSppiner = resp)\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".lds-hourglass {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n.lds-hourglass:after {\n  content: \" \";\n  display: block;\n  border-radius: 50%;\n  width: 0;\n  height: 0;\n  margin: 8px;\n  box-sizing: border-box;\n  border: 32px solid #fff;\n  border-color: #9d8b6f transparent #5a9469 transparent;\n  animation: lds-hourglass 3.2s infinite;\n}\n@keyframes lds-hourglass {\n  0% {\n    transform: rotate(0);\n    animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);\n  }\n  50% {\n    transform: rotate(900deg);\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n  100% {\n    transform: rotate(3600deg);\n  }\n}\n",
          "styleUrl": "./elix-spinner.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_spinnerStateService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "_spinnerStateService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "accessors": {
        "showSppiner": {
          "name": "showSppiner",
          "getSignature": {
            "name": "showSppiner",
            "type": "boolean",
            "returnType": "boolean",
            "line": 17
          }
        }
      }
    },
    {
      "name": "ExploreComponent",
      "id": "component-ExploreComponent-e3503dce072a786e0c5d8f69fd94b514",
      "file": "src/app/module/explore/explore/explore.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-explore",
      "styleUrls": ["./explore.component.scss"],
      "styles": [],
      "templateUrl": ["./explore.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "map",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "initMap",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {AfterViewInit, Component} from '@angular/core';\nimport * as L from 'leaflet'\n\n@Component({\n  selector: 'elix-explore',\n  templateUrl: './explore.component.html',\n  styleUrls: ['./explore.component.scss']\n})\nexport class ExploreComponent implements AfterViewInit {\n\n  private map: any;\n\n  constructor() {\n  }\n\n  ngAfterViewInit(): void {\n    this.initMap();\n\n  }\n\n  private initMap(): void {\n    this.map = L.map('map', {\n      center: [39.8282, -48.5795],\n      zoom: 1\n    });\n\n    const tiles = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      maxZoom: 13,\n      minZoom: 3,\n      attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n    });\n\n    tiles.addTo(this.map);\n\n\n    navigator.geolocation.getCurrentPosition((position => {\n      let lat = position.coords.latitude\n      let long = position.coords.longitude\n\n      let marker = L.marker([lat, long]).addTo(this.map)\n    }))\n  }\n\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".map-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: 30px;\n}\n\n.map-frame {\n  border: 2px solid black;\n  height: 90%;\n  width: 70%;\n}\n\n#map {\n  height: 100%;\n}\n",
          "styleUrl": "./explore.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 11
      },
      "implements": ["AfterViewInit"],
      "templateData": "<div class=\"map-container flex items-center justify-center\">\n  <div class=\"map-frame\">\n    <div id=\"map\"></div>\n  </div>\n</div>\n"
    },
    {
      "name": "HeaderComponent",
      "id": "component-HeaderComponent-723faadbb8a41bf44b58d1420ae971ec",
      "file": "src/stories/header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-header",
      "styleUrls": ["./header.css"],
      "styles": [],
      "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": ""
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\nbody {\n  margin: 0;\n}\n",
          "styleUrl": "./header.css"
        }
      ],
      "stylesData": ""
    },
    {
      "name": "HeaderComponent",
      "id": "component-HeaderComponent-e592bfd75f1af2cf78f214c96ae5d672-1",
      "file": "src/app/module/header/header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-header",
      "styleUrls": ["./header.component.sass"],
      "styles": [],
      "templateUrl": ["./header.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "background",
          "defaultValue": "'transparent'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "\"light\" | \"dark\" | \"transparent\""
        },
        {
          "name": "color",
          "defaultValue": "'transparent'",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "string"
        },
        {
          "name": "inputValue",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string"
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "string"
        }
      ],
      "outputsClass": [
        {
          "name": "onSayHello",
          "defaultValue": "new EventEmitter<MouseEvent>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "notification",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLElement",
          "optional": false,
          "description": "",
          "line": 54,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'notification'"
            }
          ]
        },
        {
          "name": "number",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 53
        },
        {
          "name": "pointIcon",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef",
          "optional": false,
          "description": "",
          "line": 51,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'pointIcon'"
            }
          ]
        },
        {
          "name": "routerData",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IConfigRouter[]",
          "optional": false,
          "description": "",
          "line": 52
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "value1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 45
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "openBadge",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 95,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "resizeData",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "dinamically",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "dinamically",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "retriveCoordinates",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 88,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild} from '@angular/core';\nimport {animate, state, style, transition, trigger} from \"@angular/animations\";\nimport {ConnectionService} from \"../../shared/utils/services/firebase/connection.service\";\nimport {catchError, map} from \"rxjs/operators\";\nimport {PopUpStateService} from \"./pop-up-login/pop-up-state.service\";\nimport {throwError} from \"rxjs\";\nimport {AuthService} from \"../../shared/utils/services\";\nimport {OverlayPopUpService} from \"../../shared/utils/services/overlay/overlay-pop-up.service\";\nimport {ActivatedRoute} from \"@angular/router\";\nimport {IConfigRouter} from \"../../shared/utils/interfaces\";\nimport {TimerService} from \"../../shared/utils/services/timer/timer.service\";\nimport {OverlayService} from \"../../shared/utils/services/overlay/overlay.service\";\nimport {NotificationComponent} from \"./tooltip/notification/notification.component\";\n\n@Component({\n  selector: 'elix-header',\n  templateUrl: './header.component.html',\n  animations: [\n    trigger('openClose', [\n      // ...\n      state('open', style({\n        height: '200px',\n        opacity: 1,\n        backgroundColor: 'yellow'\n      })),\n      state('closed', style({\n        height: '100px',\n        opacity: 0.8,\n        backgroundColor: '#c6ecff'\n      })),\n      transition('open => closed', [\n        animate('1s')\n      ]),\n      transition('closed => open', [\n        animate('0.5s')\n      ]),\n    ]),\n  ],\n  styleUrls: ['./header.component.sass']\n})\nexport class HeaderComponent implements OnInit {\n  @Input()\n  inputValue = ''\n  value: any\n  value1: any\n  @Input() name: string\n  @Input() color = 'transparent'\n  @Output()\n  onSayHello = new EventEmitter<MouseEvent>()\n  @Input() background: 'light' | 'dark' | 'transparent' = 'transparent'\n  @ViewChild('pointIcon') pointIcon: ElementRef\n  routerData: IConfigRouter[] = []\n  number: number\n@ViewChild('notification') notification: HTMLElement\n\n  constructor(private _firebaseTry: ConnectionService,\n              private _popUpState: PopUpStateService,\n              private _overlayPopUpService: OverlayPopUpService,\n              private _router: ActivatedRoute,\n              private _timer: TimerService,\n              private _overlayAll: OverlayService\n              ) {\n    this._firebaseTry.setUrl('/repository')\n  }\n\n  ngOnInit(): void {\n\n    this._timer.counterData$.subscribe(resp => this.number = resp.length )\n\n    this._firebaseTry.data.snapshotChanges()\n      .pipe(map(changeData => changeData\n        .map(c => {\n          let a = c.payload.doc.data();\n          return {\n            key: c.payload.doc.id, value:\n              a[Object.keys(a)[0]]\n          }\n        }))).subscribe(data => console.log(data))\n\n    this.routerData = this._router.snapshot.data.data\n  }\n\n  resizeData(event: Event, dinamically: boolean) {\n\n    dinamically ? this.inputValue = ' ' : this.inputValue = ''\n  }\n\n  retriveCoordinates(event: MouseEvent) {\n    this.onSayHello.emit(event)\n    this._popUpState.statePopLogin(true)\n\n    this._overlayPopUpService.open(event)\n  }\n\n  openBadge(){\n    const target = this.notification\n    this._overlayAll.display(this.notification, NotificationComponent)\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".iufce__icon\n  color: #cdd9e5\n  height: inherit\n  width: inherit\n.iufce__top\n  top: 0px\n.iufce__expand-input\n  width: 32.75rem\n  transition: all 0.5s ease-in-out\n\n.iufce__parrent-header\n  &.background\n    &-dark\n      background: #8F8F8F\n\n    &-transparent\n      background: #2d333b\n\n    &-light\n      background: #F6F6F6\n\n.colorIcon\n  &-dark\n    color: #D9E5FF\n\n  &-transparent\n    color: #92A2BD\n\n  &-light\n    color: #8F8F8F\n\n.active\n  border: 1px solid\n  border-radius: 5px\n\n.vorkurt__router\n  height: 2rem\n  color: #F6F6F6\n\n",
          "styleUrl": "./header.component.sass"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_firebaseTry",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_popUpState",
            "type": "PopUpStateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_overlayPopUpService",
            "type": "OverlayPopUpService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_router",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_timer",
            "type": "TimerService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_overlayAll",
            "type": "OverlayService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 54,
        "jsdoctags": [
          {
            "name": "_firebaseTry",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_popUpState",
            "type": "PopUpStateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_overlayPopUpService",
            "type": "OverlayPopUpService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_router",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_timer",
            "type": "TimerService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_overlayAll",
            "type": "OverlayService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "HeaderComponent-1",
      "templateData": "<div class=\"bg-blue-700 sticky iufce__top\"\n     [ngClass]=\"' vorkurt__background-thrid iufce__parrent-header background-' + background\">\n  <div elixElixDrag class=\"flex pl-8 justify-center items-center h-16\">\n    <div class=\"w-8 h-8 mr-4 cursor-pointer\" [routerLink]=\"'account'\">\n      <mat-icon [svgIcon]=\"'fa_brands:github'\" class=\"iufce__icon \" [ngClass]=\"'colorIcon-'+color\"></mat-icon>\n    </div>\n    <div class=\"flex flex-1 items-center\">\n      <input type=\"text\" class=\"w-1/6 h-7 text-black pl-3 vorkurt__background-primary text-white\"\n             [ngClass]=\"inputValue ? 'iufce__expand-input' :'' \"\n             (focus)=\"resizeData($event, true)\"\n             [(ngModel)]=\"inputValue\"\n             (focusout)=\"resizeData($event, false)\"\n      >\n      <div class=\"ml-2\">\n        <a class=\"text-white vorkurt__text-size-secondary\" routerLinkActive=\"active\"\n           [routerLink]=\"['account/pull_request']\" [ngClass]=\"'colorIcon-'+color\">Pull request</a>\n      </div>\n      <div class=\"ml-2 vorkurt__router flex items-center\" *ngFor=\"let dataRouter of routerData\" routerLinkActive=\"active\" [routerLink]=\"[dataRouter.path]\" >\n        <a class=\"text-white vorkurt__text-size-secondary\"\n           [ngClass]=\"'colorIcon-'+color\">{{dataRouter.name}}</a>\n      </div>\n    </div>\n    <div class=\"flex pr-8\">\n      <div class=\"w-5 h-5\" #notification>\n        <button [matBadge]='number === 0 ? \"\" : number ' (click)=\"openBadge()\">\n          <mat-icon [svgIcon]=\"'fa_solid:bell'\" class=\"iufce__icon cursor-pointer\"\n                    [ngClass]=\"'colorIcon-'+color\"></mat-icon>\n        </button>\n      </div>\n      <div class=\"w-5 h-5 ml-2\">\n        <mat-icon [svgIcon]=\"'fa_solid:plus'\" class=\"iufce__icon cursor-pointer\"\n                  [ngClass]=\"'colorIcon-'+color\"></mat-icon>\n      </div>\n      <div class=\"w-5 h-5 ml-2\" #pointIcon>\n        <mat-icon\n          (click)=\"retriveCoordinates($event)\"\n          [svgIcon]=\"'fa_solid:user-circle'\"\n          class=\"iufce__icon cursor-pointer\"\n          [ngClass]=\"'colorIcon-'+color\"></mat-icon>\n      </div>\n    </div>\n  </div>\n</div>\n<router-outlet></router-outlet>\n"
    },
    {
      "name": "HeaderNewRepoComponent",
      "id": "component-HeaderNewRepoComponent-d1ab9b52d7fd39c59458c2dec5d2d8a2",
      "file": "src/app/module/newRepo/header-new-repo/header-new-repo.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-header-new-repo",
      "styleUrls": ["./header-new-repo.component.scss"],
      "styles": [],
      "templateUrl": ["./header-new-repo.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "button",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 14,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'button'"
            }
          ]
        },
        {
          "name": "dataTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 13
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 19,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "openService",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnInit, ViewChild} from '@angular/core';\nimport {OverlayService} from \"../../../shared/utils/services/overlay/overlay.service\";\nimport {TemplateRepositoryComponent} from \"../tooltip/template-repository/template-repository.component\";\nimport {TemplateRepositoryService} from \"../../../shared/utils/services/newRepository/template-repository/template-repository.service\";\n\n@Component({\n  selector: 'elix-header-new-repo',\n  templateUrl: './header-new-repo.component.html',\n  styleUrls: ['./header-new-repo.component.scss']\n})\nexport class HeaderNewRepoComponent implements OnInit {\n\n  dataTemplate: string\n  @ViewChild('button') button: any\n\n  constructor(private _overlayAll: OverlayService,private _dataSendedTemplate:TemplateRepositoryService) {\n  }\n\n  ngOnInit(): void {\n    this._dataSendedTemplate.templateData$.subscribe(resp => this.dataTemplate = resp)\n  }\n\n  openService(event: any) {\n    const target = this.button as HTMLElement\n    this._overlayAll.display(target, TemplateRepositoryComponent)\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".vorkurt__header__width-container{\n  width: 35.333333rem;\n}\n\n.vorkurt__header-newRepo-header{\n  mat-button-wrapper{\n      display: flex;\n    background: red;\n  }\n}\n",
          "styleUrl": "./header-new-repo.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_overlayAll",
            "type": "OverlayService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_dataSendedTemplate",
            "type": "TemplateRepositoryService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "_overlayAll",
            "type": "OverlayService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_dataSendedTemplate",
            "type": "TemplateRepositoryService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"pt-12 vorkurt__color-text font-normal\">\n  <div>\n    <div class=\"pb-5 vorkurt__border-bottom mb-6\">\n      <div class=\"text-2xl font-normal\">\n        <p>\n          Create New Repository\n        </p>\n      </div>\n      <div class=\"md:block xl:flex\">\n        <div class=\"vorkurt__header__width-container\">\n          <p class=\"leading-4 racking-widest vorkurt__color-text-line vorkurt__text-size-secondary w-44 xl:w-full\">\n            A repository contains all project files, including the revision history. Already have a project repository\n            elsewhere?\n          </p>\n        </div>\n        <div class=\"xs:bg-blue-700 xl:w-1/12 text-blue-500 underline cursor-pointer racking-widest leading-4\">\n          <p>\n            Import a repository\n          </p>\n        </div>\n      </div>\n    </div>\n    <div class=\"vorkurt__border-bottom pb-5 mb-6 vorkurt__border-bottom\">\n      <div>\n        <div class=\"flex flex-col\">\n          <span class=\"text-base m-0\">Repository template</span>\n          <span class=\"vorkurt__color-text-line\">Start your repository with a template repository's contents.</span>\n        </div>\n        <div class=\"pt-6\"\n        >\n          <div class=\"w-36\" #button>\n            <button mat-raised-button (click)=\"openService($event)\"\n                    class=\"w-max flex vorkurt__color-background vorkurt__color-text text-base font-normal\n               vorkurt__border-color vorkurt__header-newRepo-header\n          \"\n                    style=\"padding-left: 2px;\"\n            >\n              <div class=\"flex mx-2\">\n                <div>\n                  {{dataTemplate ? dataTemplate : 'No template'}}\n                </div>\n                <div>\n                  <mat-icon class=\"flex fixed\" [svgIcon]=\"'fa_solid:sort-down'\"></mat-icon>\n                </div>\n              </div>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "LeftSideRepoComponent",
      "id": "component-LeftSideRepoComponent-8afb3b35d72891f5a1de4624eb54dfbb",
      "file": "src/app/module/account/left-side-repo/left-side-repo.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-left-side-repo",
      "styleUrls": ["./left-side-repo.component.scss"],
      "styles": [],
      "templateUrl": ["./left-side-repo.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dataFilter",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "repo",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IAccount[]",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "unsubscribe$",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "ate",
          "args": [
            {
              "name": "event",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {AccountService} from \"../../../shared/utils/services/account/account.service\";\nimport {Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\nimport {IAccount} from \"../../../shared/utils/interfaces\";\n\n@Component({\n  selector: 'elix-left-side-repo',\n  templateUrl: './left-side-repo.component.html',\n  styleUrls: ['./left-side-repo.component.scss']\n})\nexport class LeftSideRepoComponent implements OnInit, OnDestroy {\n\n  private unsubscribe$ = new Subject()\n  repo: IAccount[]\n  dataFilter: string\n  constructor(private _accountService: AccountService) {\n\n  }\n\n  ngOnInit(): void {\n    this._accountService.dataRepo$.pipe(takeUntil(this.unsubscribe$))\n      .subscribe(resp => {\n        console.log(resp)\n        this.repo = resp\n      })\n  }\n\n  ngOnDestroy(): void {\n    this.unsubscribe$.next()\n    this.unsubscribe$.complete()\n  }\n\n  ate(event: string) {\n    this._accountService.filterDataFromQuery(event.toUpperCase())\n  }\n\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./left-side-repo.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_accountService",
            "type": "AccountService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "_accountService",
            "type": "AccountService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<div *ngIf=\"repo\" class=\"ml-2 text-white mt-2 pt-8 pl-7\">\n  <div>\n    <div class=\"flex items-center\">\n      <div class=\"flex-1\">\n        Repository\n      </div>\n      <div\n        class=\"flex h-7 items-center justify-center vorkurt__background-button w-1/4 rounded-lg ml-2 mr-2 cursor-pointer\"\n        [routerLink]=\"['/','new']\">\n        <button class=\"flex justify-center vorkurt__background-button\">\n          <mat-icon class=\"text-white vorkurt__size-icon\" [svgIcon]=\"'fa_solid:book'\">\n          </mat-icon>\n          <div class=\"ml-2\">\n            <span>New</span>\n          </div>\n\n        </button>\n      </div>\n    </div>\n    <div>\n      <div class=\"mt-2 h-8 -ml-2 pr-2\">\n        <input\n          [ngModel]=\"dataFilter\"\n          type=\"text\"\n          name=\"price\"\n          id=\"price\"\n          class=\"h-8 vorkurt__background-primary focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md\"\n          placeholder=\"Find a repository\">\n      </div>\n    </div>\n    <div *ngFor=\"let resp of repo\" class=\"cursor-pointer\">\n      <div class=\"flex mt-2 mb-2 hover:underline\" [routerLink]=\"resp.link\">\n        <mat-icon\n          [svgIcon]=\"'fa_solid:user-circle'\"></mat-icon>\n        <div class=\"ml-2 mt-0.5\">\n          {{resp.owner}}/{{resp.repo}}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "MiddleComponent",
      "id": "component-MiddleComponent-3f8425b6b3af313787a2125da4baa136",
      "file": "src/app/module/newRepo/middle/middle.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-middle",
      "styleUrls": ["./middle.component.scss"],
      "styles": [],
      "templateUrl": ["./middle.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "middle",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 12,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'userName'"
            }
          ]
        },
        {
          "name": "repositoryName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "user",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 14
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "openServices",
          "args": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 25,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDescription",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 30,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setRepositoryName",
          "args": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 35,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "Event",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnInit, ViewChild} from '@angular/core';\nimport {OverlayService} from \"../../../shared/utils/services/overlay/overlay.service\";\nimport {UserNameRepositoryComponent} from \"../tooltip/user-name-repository/user-name-repository.component\";\nimport {TemplateRepositoryService} from \"../../../shared/utils/services/newRepository/template-repository/template-repository.service\";\n\n@Component({\n  selector: 'elix-middle',\n  templateUrl: './middle.component.html',\n  styleUrls: ['./middle.component.scss']\n})\nexport class MiddleComponent implements OnInit {\n  @ViewChild('userName') middle: any\n\n  user: any\n  repositoryName: string\n  description: string\n\n  constructor(private _overlayAll: OverlayService, private _templateRepository: TemplateRepositoryService) {\n  }\n\n  ngOnInit(): void {\n    this._templateRepository.templateUserName$.subscribe(resp => this.user = resp)\n  }\n\n  openServices(event: any) {\n    const target = this.middle as HTMLElement\n    this._overlayAll.display(target, UserNameRepositoryComponent)\n  }\n\n  setDescription(event: Event) {\n    const a = event.target as HTMLTextAreaElement\n    this._templateRepository.sendDescriptionNameOnObservable(a.value ?? \"\")\n  }\n\n  setRepositoryName(event: Event) {\n    const a = event.target as HTMLTextAreaElement\n    this._templateRepository.sendRepositoryNameOnObservable(a.value)\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./middle.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_overlayAll",
            "type": "OverlayService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_templateRepository",
            "type": "TemplateRepositoryService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "_overlayAll",
            "type": "OverlayService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_templateRepository",
            "type": "TemplateRepositoryService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"vorkurt__border-bottom pb-5 mb-6\">\n  <div class=\"flex\">\n    <div class=\"w-44\">\n      <span>\n        Owner <span class=\"text-red-600\">\n        *\n      </span>\n      </span>\n    </div>\n    <div>\n      <span>\n        Repository Name <span class=\"text-red-600\">\n        *\n      </span>\n      </span>\n    </div>\n  </div>\n  <div class=\"flex pt-1 mb-2\">\n    <div #userName>\n      <button mat-raised-button (click)=\"openServices($event)\"\n              class=\"w-max flex vorkurt__color-background vorkurt__color-text text-base font-normal\n               vorkurt__border-color vorkurt__header-newRepo-header\n          \"\n              style=\"padding-left: 2px;\"\n      >\n        <div class=\"flex mx-2\">\n          <div>\n            {{user ? user : 'User Name'}}\n          </div>\n          <div>\n            <mat-icon class=\"flex fixed\" [svgIcon]=\"'fa_solid:sort-down'\"></mat-icon>\n          </div>\n        </div>\n      </button>\n    </div>\n    <div class=\"flex items-center mx-2 text-3xl mr-4\">\n      <span> / </span>\n    </div>\n    <div class=\"flex\">\n      <div class=\"h-8 -ml-2 pr-2 w-72\">\n        <input\n          (change)=\"setRepositoryName($event)\"\n          type=\"text\"\n          name=\"price\"\n          id=\"repo\"\n          class=\"focus:vorkurt__border-input h-9 vorkurt__background-primary focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-4 pr-12 sm:text-sm border-gray-300 rounded-md\"\n        >\n      </div>\n    </div>\n  </div>\n  <div class=\"mb-2\">\n    Great repository names are short an memorable. Need inspiration? How about musical-umbrella?\n  </div>\n  <div class=\"mt-5\">\n    <div class=\"text-base font-normal\">\n      <span>Description (optional)</span>\n    </div>\n    <input\n      (change)=\"setDescription($event)\"\n      type=\"text\"\n      name=\"price\"\n      id=\"description\"\n      class=\"focus:vorkurt__border-input h-9 vorkurt__background-primary focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-4 pr-12 sm:text-sm border-gray-300 rounded-md\"\n    >\n  </div>\n\n</div>\n<div class=\"flex vorkurt__border-bottom pb-5 mb-6\">\n  <div>\n    <section class=\"flex flex-col\">\n      <mat-checkbox class=\"example-margin\">\n        <div class=\"flex\">\n          <div class=\"flex justify-center items-center mr-2\">\n            <mat-icon class=\"text-white vorkurt__size-icon text-xl\" [svgIcon]=\"'fa_solid:book'\"></mat-icon>\n          </div>\n          <div class=\"flex flex-col\">\n            <span class=\"h-3 text-base\">\n              Public\n            </span>\n            <span>\n              Anyone on the internet can see this repository. You choose who can commit.\n            </span>\n          </div>\n        </div>\n      </mat-checkbox>\n      <mat-checkbox class=\"example-margin my-3\">\n        <div class=\"flex\">\n          <div class=\"flex justify-center items-center mr-2\">\n            <mat-icon class=\"text-white vorkurt__size-icon\" [svgIcon]=\"'fa_solid:lock'\"></mat-icon>\n          </div>\n          <div class=\"flex flex-col\">\n            <span class=\"h-3 text-base\">\n               Private\n            </span>\n            <span>\n              You choose who can see and commit to this repository\n            </span>\n          </div>\n        </div>\n      </mat-checkbox>\n    </section>\n  </div>\n</div>\n"
    },
    {
      "name": "NewRepoComponent",
      "id": "component-NewRepoComponent-b60829fe92c95a1bacc4baa98a3228e8",
      "file": "src/app/module/newRepo/new-repo.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-new-repo",
      "styleUrls": ["./new-repo.component.scss"],
      "styles": [],
      "templateUrl": ["./new-repo.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'elix-new-repo',\n  templateUrl: './new-repo.component.html',\n  styleUrls: ['./new-repo.component.scss']\n})\nexport class NewRepoComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./new-repo.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"vorkurt__height-account vorkurt__color-text font-normal\">\n  <div class=\"flex justify-center h-full\">\n    <div class=\"w-1/3\">\n      <elix-header-new-repo></elix-header-new-repo>\n      <elix-middle></elix-middle>\n      <elix-bottom></elix-bottom>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "NotificationComponent",
      "id": "component-NotificationComponent-2427d264ef303a732f6d5b9fc7f71210",
      "file": "src/app/module/header/tooltip/notification/notification.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-notification",
      "styleUrls": ["./notification.component.scss"],
      "styles": [],
      "templateUrl": ["./notification.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "notifications",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ITimer[]",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {TimerService} from \"../../../../shared/utils/services/timer/timer.service\";\nimport {ITimer} from \"../../../../shared/utils/interfaces\";\n\n@Component({\n  selector: 'elix-notification',\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.scss']\n})\nexport class NotificationComponent implements OnInit {\n  notifications: ITimer[]\n\n  constructor(private _timerService: TimerService) {\n  }\n\n  ngOnInit(): void {\n    this._timerService.counterData$.subscribe(resp => this.notifications = resp)\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".vorkurt__notification:hover{\n  background: #316dca;\n  color: #8F8F8F;\n}\n",
          "styleUrl": "./notification.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_timerService",
            "type": "TimerService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "_timerService",
            "type": "TimerService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<elix-jumbotron *ngIf=\"notifications.length\" [type]=\"'template'\"\n                class=\"text-xl vorkurt__color-text flex vorkurt__container-template\">\n  <div *ngFor=\"let notification of notifications\" class=\"flex flex-col\">\n    <div class=\"hover: cursor-pointer flex vorkurt__notification\">\n      <div class=\"w-10\">{{notification.id}}</div>\n      <div>{{notification.name}}</div>\n    </div>\n  </div>\n</elix-jumbotron>\n"
    },
    {
      "name": "PageComponent",
      "id": "component-PageComponent-ed8b90d18000bd506168b1f0e74ee936",
      "file": "src/stories/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-page",
      "styleUrls": ["./page.css"],
      "styles": [],
      "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": ""
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
          "styleUrl": "./page.css"
        }
      ],
      "stylesData": ""
    },
    {
      "name": "PageNotFoundComponent",
      "id": "component-PageNotFoundComponent-2d886d14106910199ee84c2639344bd8",
      "file": "src/@core/core/page-not-found/page-not-found.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-page-not-found",
      "styleUrls": ["./page-not-found.component.scss"],
      "styles": [],
      "templateUrl": ["./page-not-found.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'elix-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.scss']\n})\nexport class PageNotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./page-not-found.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"flex font-normal h-5/6 items-center justify-center text-6xl vorkurt__color-text\">\n  <div>\n    <div class=\"flex items-center flex-col\">\n      <div class=\"pb-20\">\n      Page Not Foun\n      </div>\n      <div class=\"w-1/3\">\n        <img src=\"https://1.bp.blogspot.com/-RyFB60VBiA0/XqxM-LYTR4I/AAAAAAAABE0/A4bqBPK_ETMzDRK_qO_s0ooiSiMF19xgACLcBGAsYHQ/s1600/sed%2Bdp%2Bfor%2Bwhatsapp.jpg\">\n      </div>\n    </div>\n    <div class=\"flex justify-center\">\n      <button mat-button routerLink=\"/account\"> Go To Account </button>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "PageNotFoundComponent",
      "id": "component-PageNotFoundComponent-2d886d14106910199ee84c2639344bd8-1",
      "file": "src/app/auth/page-not-found/page-not-found.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-page-not-found",
      "styleUrls": ["./page-not-found.component.scss"],
      "styles": [],
      "templateUrl": ["./page-not-found.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'elix-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.scss']\n})\nexport class PageNotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./page-not-found.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "isDuplicate": true,
      "duplicateId": 1,
      "duplicateName": "PageNotFoundComponent-1",
      "templateData": "<div>\n  <div class=\"flex justify-center items-center\">\n    <p class=\"text-4xl text-white\"> Page Not Found</p>\n  </div>\n</div>\n"
    },
    {
      "name": "PopUpLoginComponent",
      "id": "component-PopUpLoginComponent-f9833e688663e65b5ba2d842122e7f12",
      "file": "src/app/module/header/pop-up-login/pop-up-login.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-pop-up-login",
      "styleUrls": ["./pop-up-login.component.scss"],
      "styles": [],
      "templateUrl": ["./pop-up-login.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "componentRef",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "ComponentRef<PopUpLoginComponent>"
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dataUser",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "popUp",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "",
          "line": 14,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'popUp'"
            }
          ]
        },
        {
          "name": "start",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "timer",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "timerId",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "pauseTimeout",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "resumeTimeOut",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "signOut",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "stopTimer",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, ComponentRef, ElementRef, Input, OnInit, Renderer2, ViewChild} from '@angular/core';\nimport {PopUpStateService} from \"./pop-up-state.service\";\nimport {AuthService} from \"../../../shared/utils/services\";\nimport {UserService} from \"../../../shared/utils/services/user/user-service\";\nimport {SpinnerStateService} from \"../../../shared/spinner/spinner-state.service\";\nimport {OverlayPopUpService} from \"../../../shared/utils/services/overlay/overlay-pop-up.service\";\n\n@Component({\n  selector: 'elix-pop-up-login',\n  templateUrl: './pop-up-login.component.html',\n  styleUrls: ['./pop-up-login.component.scss']\n})\nexport class PopUpLoginComponent implements OnInit {\n  @ViewChild('popUp') popUp: ElementRef<HTMLElement>\n  dataUser: any\n  timerId: number\n  start: number = 0\n  timer: number = 0\n\n  @Input() componentRef: ComponentRef<PopUpLoginComponent>\n\n  constructor(private _popState: PopUpStateService,\n              private _render: Renderer2,\n              private _authService: AuthService,\n              private _userService: UserService,\n              private _spinnerService: SpinnerStateService,\n              private _overlayConfig: OverlayPopUpService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dataUser = this._userService.getUserLoggedIn()\n    this.resumeTimeOut()\n  }\n\n  signOut() {\n    this._popState.statePopLogin(false)\n    this._spinnerService.setStateBehaviorSpinner(true)\n    this._authService.logout()\n    this._spinnerService.setStateBehaviorSpinner(false)\n    this._overlayConfig.closeOverlay()\n  }\n\n  stopTimer() {\n    window.setTimeout(() => {\n      this.componentRef.destroy()\n    })\n  }\n\n  pauseTimeout() {\n    window.clearInterval(this.timer)\n  }\n\n  resumeTimeOut() {\n    this.timer = window.setInterval(() => {\n      if (this.start < 100) {\n        this.start += 10\n      } else {\n        this.pauseTimeout()\n        this._overlayConfig.closeOverlay()\n        return\n      }\n    }, 500)\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".elix__border-color{\n  border-color: #1ea7fd;\n  box-shadow: 2px 1px 8px blue, -8px 0px 8px;\n  position: absolute;\n  z-index: 100000000;\n  height: min-content;\n}\n\nh1 {\n  margin: 0;\n  padding: 1em;\n}\n",
          "styleUrl": "./pop-up-login.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_popState",
            "type": "PopUpStateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_render",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_authService",
            "type": "AuthService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_userService",
            "type": "UserService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_spinnerService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_overlayConfig",
            "type": "OverlayPopUpService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "_popState",
            "type": "PopUpStateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_render",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_authService",
            "type": "AuthService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_userService",
            "type": "UserService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_spinnerService",
            "type": "SpinnerStateService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_overlayConfig",
            "type": "OverlayPopUpService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div #popUp\n     class=\"\n border-2\n rounded-2xl text-white\n w-44 elix__border-color\n border-solid\n\"\n     (mouseenter)=\"pauseTimeout()\"\n     (mouseleave)=\"resumeTimeOut()\">\n  <div>\n    <div>\n      <p class=\"truncate\">{{dataUser.email || dataUser.user.email}} </p>\n    </div>\n    <div>\n      <mat-progress-bar mode=\"determinate\" [value]=start></mat-progress-bar>\n    </div>\n    <div class=\"flex justify-center\">\n      <button mat-flat-button (click)=\"signOut()\">Sign Out</button>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "PullRequestComponent",
      "id": "component-PullRequestComponent-e01841209e5fa1f98c30fe956dec9333",
      "file": "src/app/module/repository/pull-request/pull-request.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-pull-request",
      "styleUrls": ["./pull-request.component.scss"],
      "styles": [],
      "templateUrl": ["./pull-request.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'elix-pull-request',\n  templateUrl: './pull-request.component.html',\n  styleUrls: ['./pull-request.component.scss']\n})\nexport class PullRequestComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./pull-request.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<div>\n  <div>\n    <div>\n\n    </div>\n  </div>\n</div>\n<p>pull-request works!</p>\n"
    },
    {
      "name": "RepositoryTabProjectComponent",
      "id": "component-RepositoryTabProjectComponent-df40c75efa8fb3d9df415d5d2fb12b69",
      "file": "src/app/module/repository/repository-tab-project/repository-tab-project.component.ts",
      "encapsulation": ["ViewEncapsulation.None"],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-repository-tab-project",
      "styleUrls": ["./repository-tab-project.component.scss"],
      "styles": [],
      "templateUrl": ["./repository-tab-project.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "routes",
          "defaultValue": "[{name: '', path: ''}]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[literal type]",
          "optional": false,
          "description": "",
          "line": 11
        }
      ],
      "methodsClass": [
        {
          "name": "handleClick",
          "args": [
            {
              "name": "event",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 16,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 20,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {ActivatedRoute} from \"@angular/router\";\n\n@Component({\n  selector: 'elix-repository-tab-project',\n  templateUrl: './repository-tab-project.component.html',\n  styleUrls: ['./repository-tab-project.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class RepositoryTabProjectComponent implements OnInit {\n  routes: [{ name: string, path: string }] = [{name: '', path: ''}]\n\n  constructor(private _router: ActivatedRoute) {\n  }\n\n  handleClick(event: string) {\n    return event\n  }\n\n  ngOnInit(): void {\n    this.routes = this._router.snapshot.data.data.router\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "elix-repository-tab-project {\n  .mat-tab-list.mat-tab-nav-bar {\n    color: white;\n    padding-bottom: 2px;\n\n  }\n\n  .vorkurt__margin {\n    a {\n      .mat-tab-list {\n        padding-top: 5px;\n      }\n\n      .mat-tab-links {\n        margin-top: -2px;\n        margin-left: 5px;\n        margin-right: 5px;\n      }\n    }\n\n    a.active1 {\n      border-right: 1px;\n      border-left: 1px;\n      border: solid #1ea7fd;\n      border-bottom: none;\n      background: #22272e;\n      border-top-left-radius: 5px;\n      border-top-right-radius: 5px;\n      color: white;\n\n      .mat-tab-links {\n        margin-top: -6px;\n        margin-left: 5px;\n        margin-right: 5px;\n        height: 22px;\n      }\n\n    }\n  }\n\n  .mat-tab-nav-bar {\n    color: white;\n  }\n\n  .forkurt__border {\n    border-bottom: 1px solid #1ea7fd\n  }\n\n  .vorkurt__margin {\n    margin-bottom: -1px;\n  }\n}\n",
          "styleUrl": "./repository-tab-project.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_router",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "_router",
            "type": "ActivatedRoute",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"flex forkurt__border\" cdkDrag>\n  <nav class=\"flex flex-1 vorkurt__margin-nav\">\n    <div *ngFor=\"let route of routes\" class=\"vorkurt__margin\">\n      <a mat-tab-nav-bar\n         class=\"flex flex-row text-blue-400 mr-2 ml-2\"\n         [routerLink]=\"route.path\"\n         routerLinkActive=\"active1\"\n         (click)=\"handleClick(route.name)\"\n\n      >{{route.name}}\n      </a>\n    </div>\n  </nav>\n  <div class=\"flex flex-wrap\">\n    sda\n  </div>\n</div>\n<router-outlet></router-outlet>\n"
    },
    {
      "name": "RightSideArtifactsComponent",
      "id": "component-RightSideArtifactsComponent-8444770287976fdfded68dd71f35a8eb",
      "file": "src/app/module/account/right-side-artifacts/right-side-artifacts.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-right-side-artifacts",
      "styleUrls": ["./right-side-artifacts.component.scss"],
      "styles": [],
      "templateUrl": ["./right-side-artifacts.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'elix-right-side-artifacts',\n  templateUrl: './right-side-artifacts.component.html',\n  styleUrls: ['./right-side-artifacts.component.scss']\n})\nexport class RightSideArtifactsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./right-side-artifacts.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"text-white ml-8\">Test</div>\n"
    },
    {
      "name": "SettingsComponent",
      "id": "component-SettingsComponent-68488e210db98427fd50271a45aaf0f6",
      "file": "src/app/module/repository/settings/settings.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-settings",
      "styleUrls": ["./settings.component.scss"],
      "styles": [],
      "templateUrl": ["./settings.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 12,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'elix-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss']\n})\nexport class SettingsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./settings.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 8
      },
      "implements": ["OnInit"],
      "templateData": "<p>settings works!</p>\n"
    },
    {
      "name": "TemplateRepositoryComponent",
      "id": "component-TemplateRepositoryComponent-5d18190fd94141fe638b1907f91e9218",
      "file": "src/app/module/newRepo/tooltip/template-repository/template-repository.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-template-repository",
      "styleUrls": ["./template-repository.component.scss"],
      "styles": [],
      "templateUrl": ["./template-repository.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dataTemplate",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "unSubscribe",
          "defaultValue": "new Subject()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "optional": false,
          "description": "",
          "line": 17,
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 38,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onClick",
          "args": [
            {
              "name": "event",
              "type": "INewRepository",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "event",
              "type": "INewRepository",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {NewRepositoryService} from \"../../../../shared/utils/services/newRepository/new-repository.service\";\nimport {OverlayService} from \"../../../../shared/utils/services/overlay/overlay.service\";\nimport {Subject} from \"rxjs\";\nimport {takeUntil} from \"rxjs/operators\";\nimport {ConnectionService} from \"../../../../shared/utils/services/firebase/connection.service\";\nimport {INewRepository} from \"../../../../shared/utils/interfaces\";\nimport {TemplateRepositoryService} from \"../../../../shared/utils/services/newRepository/template-repository/template-repository.service\";\n\n@Component({\n  selector: 'elix-template-repository',\n  templateUrl: './template-repository.component.html',\n  styleUrls: ['./template-repository.component.scss']\n})\nexport class TemplateRepositoryComponent implements OnInit, OnDestroy {\n  dataTemplate: any\n  private unSubscribe = new Subject()\n\n  constructor(private _sendTemplate: TemplateRepositoryService ,private _newRepository: NewRepositoryService, private _overlayService: OverlayService, private _dbCon: ConnectionService) {\n  }\n\n  ngOnInit(): void {\n    this._newRepository.newRepo$.pipe(takeUntil(this.unSubscribe)).subscribe(resp => {\n      this.dataTemplate = resp\n    })\n  }\n\n  onClick(event: INewRepository) {\n    event.check = true\n    this._dbCon.updateData(event).then(resp => {\n      if (resp) {\n        this._sendTemplate.sendDataOnObservable(event.template)\n        this._overlayService.closeOverlay()\n      }\n    })\n  }\n\n  ngOnDestroy(): void {\n    this.unSubscribe.next()\n    this.unSubscribe.complete()\n\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".vorkurt__container-template {\n  div div:hover {\n    background: #316dca;\n\n    button {\n      color: #adbac7;\n    }\n  }\n\n  button{\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}\n",
          "styleUrl": "./template-repository.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_sendTemplate",
            "type": "TemplateRepositoryService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_newRepository",
            "type": "NewRepositoryService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_overlayService",
            "type": "OverlayService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_dbCon",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "_sendTemplate",
            "type": "TemplateRepositoryService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_newRepository",
            "type": "NewRepositoryService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_overlayService",
            "type": "OverlayService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_dbCon",
            "type": "ConnectionService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit", "OnDestroy"],
      "templateData": "<elix-jumbotron [type]=\"'template'\" class=\"mt-2 flex vorkurt__container-template\">\n  <div class=\"\">\n    <div class=\"flex items-start flex cursor-pointer p-0.5 items-stretch hover:w-96\"\n         (click)=\"onClick(dataTemplate)\"\n         *ngFor=\"let dataTemplate of dataTemplate\">\n      <div class=\"w-10 flex items-center\">\n        <mat-icon *ngIf=\"dataTemplate.check\" [svgIcon]=\"'fa_solid:check'\"></mat-icon>\n      </div>\n      <div *ngIf=\"dataTemplate\" class=\"w-6 flex items-center\"><img [src]='dataTemplate.icon'></div>\n      <div class=\"flex items-center\">\n        <button class=\"vorkurt__color-text font-bold\" mat-menu-item>{{dataTemplate.template}}</button>\n      </div>\n    </div>\n  </div>\n</elix-jumbotron>\n"
    },
    {
      "name": "TimmerComponent",
      "id": "component-TimmerComponent-882920739cc09d32ed6719920095fd6d",
      "file": "src/app/module/timer/timmer/timmer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-timmer",
      "styleUrls": ["./timmer.component.scss"],
      "styles": [],
      "templateUrl": ["./timmer.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "anotherTimer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 20
        },
        {
          "name": "clearTimer",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 14
        },
        {
          "name": "countDownDate",
          "defaultValue": "new Date()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Date | any",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "description",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 19
        },
        {
          "name": "distance",
          "defaultValue": "1",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 21,
          "modifierKind": [121]
        },
        {
          "name": "flag",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 17
        },
        {
          "name": "hour",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 10
        },
        {
          "name": "minute",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 11
        },
        {
          "name": "pause",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "second",
          "defaultValue": "0",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 12
        },
        {
          "name": "style",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 18
        },
        {
          "name": "timer",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 15,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onAudioPlay",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 101,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "pauseTimeout",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 36,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "startCounter",
          "args": [
            {
              "name": "method",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "method",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateDate",
          "args": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "pause",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 112,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "date",
              "type": "Date",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "pause",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateTime",
          "args": [
            {
              "name": "moment",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "pass",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "method",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "moment",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "pass",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "method",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {TimerService} from \"../../../shared/utils/services/timer/timer.service\";\n\n@Component({\n  selector: 'elix-timmer',\n  templateUrl: './timmer.component.html',\n  styleUrls: ['./timmer.component.scss']\n})\nexport class TimmerComponent implements OnInit {\n  hour: number = 0\n  minute: number = 0\n  second: number = 0\n  countDownDate: Date | any = new Date()\n  clearTimer: boolean = false;\n  public timer: any;\n  pause: boolean = true\n  flag: boolean = true\n  style: string;\n  description: string;\n  anotherTimer: any\n  private distance: number = 1;\n\n  constructor(private _timerService: TimerService) {\n  }\n\n  ngOnInit(): void {\n\n    this.timer = window.setInterval(() => {\n      const date = new Date()\n      if (this.clearTimer) {\n        this.updateDate(date, this.pause)\n      }\n    }, 1000)\n  }\n\n  pauseTimeout() {\n    window.clearInterval(this.timer)\n  }\n\n  updateTime(moment: string, pass: number, method: boolean) {\n    if (moment === 'hour' && method) {\n      this.hour += pass\n    }\n    if (moment === 'minute' && method) {\n      this.minute += pass\n    }\n    if (moment === 'second' && method) {\n      this.second += pass\n    }\n    if (moment === 'hour' && !method) {\n      if (this.hour > 0)\n        this.hour -= pass\n      if (this.hour < 0)\n        this.hour = 0\n    }\n    if (moment === 'minute' && !method) {\n      if (this.minute > 0)\n        this.minute -= pass\n      if (this.minute < 0)\n        this.minute = 0\n    }\n    if (moment === 'second' && !method) {\n      if (this.second > 0)\n        this.second -= pass\n      if (this.second < 0)\n        this.second = 0\n    }\n  }\n\n  startCounter(method: string) {\n    if (method === 'start') {\n      this.pause = true\n      this.clearTimer = true\n      this.countDownDate = new Date(new Date().setHours(new Date().getHours() + this.hour, new Date().getMinutes() + this.minute, new Date().getSeconds() + this.second))\n      this.flag = false\n    }\n    if (method === 'reset') {\n      this.pause = true\n      this.clearTimer = true\n      this.countDownDate = new Date(new Date().setHours(new Date().getHours(), new Date().getMinutes(), new Date().getSeconds()))\n      this.hour = 0\n      this.minute = 0\n      this.second = 0\n      this.clearTimer = false\n      this.description = ''\n      this.flag = true\n    }\n    if (method === 'learn') {\n      this.clearTimer = true\n      this.countDownDate = new Date(new Date().setHours(new Date().getHours(), new Date().getMinutes() + 25, new Date().getSeconds()))\n      this.flag = false\n    }\n    if (method === 'pause') {\n      this.pause = false\n      this.clearTimer = true\n      this.countDownDate = new Date(new Date().setHours(new Date().getHours() + this.hour, new Date().getMinutes() + this.minute, new Date().getSeconds() + this.second))\n      this.flag = true\n    }\n  }\n\n  onAudioPlay() {\n    let audio = new Audio()\n    audio.src = './../../../../assets/sound/warn/Msg Tone 2a.mp3'\n    audio.load()\n    audio.play().then(resp => {\n        this.anotherTimer = setInterval(() => {\n        }, 1000)\n      }\n    )\n  }\n\n  private updateDate(date: Date, pause: boolean) {\n    const now = date.getTime()\n    if (pause) {\n      this.distance = this.countDownDate - now\n      this.flag = false\n    }\n    this.hour = Math.floor(this.distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60))\n    this.minute = Math.floor(this.distance % (1000 * 60 * 60) / (1000 * 60))\n    this.second = Math.floor(this.distance % (1000 * 60) / 1000)\n\n    if (this.distance < 0) {\n      this.hour = 0\n      this.minute = 0\n      this.second = 0\n      this.clearTimer = false\n      this.onAudioPlay()\n      clearInterval(this.anotherTimer)\n      this._timerService.sendCounterData({name: this.description, id: 1})\n      this.flag = true\n      this.style = '#adbac7'\n      this.description = ''\n    }\n\n    if (this.distance < 2000) {\n      this.style = 'red'\n    }\n    return this.distance\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".vorkurt__padding-button {\n  width: 10rem ;\n  div {\n    display: flex;\n    justify-content: center;\n\n    button {\n\n      padding-right: 0px !important;\n      padding-left: 0px !important;\n      margin-bottom: 2rem;\n\n      .mat-button-wrapper {\n        background: red !important;\n      }\n    }\n  }\n}\n\n.mat-icon {\n  height: 3.562rem !important;\n  width: 3.562rem !important;\n}\n\n\n@media (max-width: 640px) {\n  .mat-icon,.timer {\n    font-size: 1.831rem !important;\n  }\n}\n",
          "styleUrl": "./timmer.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_timerService",
            "type": "TimerService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 21,
        "jsdoctags": [
          {
            "name": "_timerService",
            "type": "TimerService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<div class=\"flex-col mb-60 text-9xl vorkurt__color-text font-normal flex justify-center items-center h-1/6\">\n  <div [ngStyle]=\"{'color':style}\" [ngClass]=\"{'text-red-400': !description}\">\n    Timer\n  </div>\n  <div class=\"flex h-full\">\n  <span class=\"text-2xl text-red-400\" *ngIf=\"!description\">\n    Please introduce a description</span>\n  </div>\n</div>\n<div [ngStyle]=\"{'color':style}\"\n     class=\"timer sm:text-4xl lg:text-9xl vorkurt__color-text font-normal h-1/4 flex flex-col justify-center items-center\">\n  <div class=\"flex\">\n    <div class=\"vorkurt__padding-button\">\n      <div class=\"flex justify-center \">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('hour', 10, true)\">\n          <mat-icon [svgIcon]=\"'fa_solid:arrow-up'\"></mat-icon>\n        </button>\n      </div>\n      <div class=\"flex justify-center\">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('hour', 1, true)\">\n          <mat-icon [svgIcon]=\"'fa_solid:sort-up'\"></mat-icon>\n        </button>\n      </div>\n      <div>\n        <span>\n          {{hour === 0 ? '00' : hour}}\n        </span>\n      </div>\n      <div class=\"flex justify-center\">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('hour', 1, false)\">\n          <mat-icon [svgIcon]=\"'fa_solid:sort-down'\"></mat-icon>\n        </button>\n      </div>\n      <div class=\"flex justify-center\">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('hour', 10, false)\">\n          <mat-icon [svgIcon]=\"'fa_solid:arrow-down'\"></mat-icon>\n        </button>\n      </div>\n      <div>\n        <button mat-raised-button *ngIf=\"flag\" [disabled]='!description' (click)=\"startCounter('start')\"> Start\n        </button>\n      </div>\n      <div>\n        <button *ngIf=\"!flag\" mat-raised-button color=\"warn\" (click)=\"startCounter('pause')\"> Pause</button>\n      </div>\n    </div>\n    <div class=\"flex items-center h-5/6\">\n\n      <div>\n        :\n      </div>\n    </div>\n    <div class=\"vorkurt__padding-button\">\n      <div class=\"flex justify-center\">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('minute', 10, true)\">\n          <mat-icon [svgIcon]=\"'fa_solid:arrow-up'\"></mat-icon>\n        </button>\n      </div>\n      <div class=\"flex justify-center\">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('minute', 1, true)\">\n          <mat-icon [svgIcon]=\"'fa_solid:sort-up'\"></mat-icon>\n        </button>\n      </div>\n      <div>\n        <span>\n          {{minute === 0 ? '00' : minute}}\n        </span>\n      </div>\n      <div class=\"flex justify-center\">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('minute', 1, false)\">\n          <mat-icon [svgIcon]=\"'fa_solid:sort-down'\"></mat-icon>\n        </button>\n      </div>\n      <div class=\"flex justify-center\">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('minute', 10, false)\">\n          <mat-icon [svgIcon]=\"'fa_solid:arrow-down'\"></mat-icon>\n        </button>\n      </div>\n      <div>\n        <button mat-raised-button [disabled]=\"!flag || !description\" (click)=\"startCounter('reset')\"> Reset</button>\n      </div>\n    </div>\n    <div class=\"flex items-center h-5/6\">\n\n      <div>\n        :\n      </div>\n    </div>\n    <div class=\"vorkurt__padding-button\">\n      <div class=\"flex justify-center\">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('second', 10, true)\">\n          <mat-icon [svgIcon]=\"'fa_solid:arrow-up'\"></mat-icon>\n        </button>\n      </div>\n      <div class=\"flex justify-center\">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('second', 1, true)\">\n          <mat-icon [svgIcon]=\"'fa_solid:sort-up'\"></mat-icon>\n        </button>\n      </div>\n      <div>\n        <span>\n          {{second === 0 ? '00' : second}}\n        </span>\n      </div>\n      <div class=\"flex justify-center\">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('second', 1, false)\">\n          <mat-icon [svgIcon]=\"'fa_solid:sort-down'\"></mat-icon>\n        </button>\n      </div>\n      <div class=\"flex justify-center\">\n        <button [disabled]=\"!flag\" mat-button (click)=\"updateTime('second', 10, false)\">\n          <mat-icon [svgIcon]=\"'fa_solid:arrow-down'\"></mat-icon>\n        </button>\n      </div>\n      <div>\n        <button mat-raised-button [disabled]=\"!flag || !description\" (click)=\"startCounter('learn')\"> Learn Mode\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n<div class=\"flex flex-row-reverse h-1/4\">\n  <div class=\"w-1/3\">\n    <div class=\"flex justify-center pr-4 pb-1 text-6xl vorkurt__color-text\">\n      Description\n    </div>\n    <div class=\"flex justify-center pr-4 pb-1 h-3/5\">\n      <textarea [(ngModel)]=\"description\" class=\"w-full h-full px-5 py-1\" matInput></textarea>\n    </div>\n  </div>\n</div>\n"
    },
    {
      "name": "UserNameRepositoryComponent",
      "id": "component-UserNameRepositoryComponent-c035d4d2113ade2d1e3594601046a8fe",
      "file": "src/app/module/newRepo/tooltip/user-name-repository/user-name-repository.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "elix-user-name-repository",
      "styleUrls": ["./user-name-repository.component.scss"],
      "styles": [],
      "templateUrl": ["./user-name-repository.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "usersName",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 17,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 21,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {LocalStorageDataService} from \"../../../../shared/utils/services/abstract/local-storage-data.service\";\nimport {OverlayService} from \"../../../../shared/utils/services/overlay/overlay.service\";\nimport {TemplateRepositoryService} from \"../../../../shared/utils/services/newRepository/template-repository/template-repository.service\";\n\n@Component({\n  selector: 'elix-user-name-repository',\n  templateUrl: './user-name-repository.component.html',\n  styleUrls: ['./user-name-repository.component.scss']\n})\nexport class UserNameRepositoryComponent implements OnInit {\n  usersName: any;\n\n  constructor(private _templateRepository: TemplateRepositoryService,private _localStoarage: LocalStorageDataService, private _overlayGlobal: OverlayService) {\n  }\n\n  ngOnInit(): void {\n    this.usersName = JSON.parse(<string>this._localStoarage.getResource('user'))\n  }\n\n  onClick() {\n    this._templateRepository.sendUserNameOnObservable(this.usersName.user.email)\n    this._overlayGlobal.closeOverlay()\n  }\n\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "",
          "styleUrl": "./user-name-repository.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "_templateRepository",
            "type": "TemplateRepositoryService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_localStoarage",
            "type": "LocalStorageDataService",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "_overlayGlobal",
            "type": "OverlayService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "_templateRepository",
            "type": "TemplateRepositoryService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_localStoarage",
            "type": "LocalStorageDataService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "_overlayGlobal",
            "type": "OverlayService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": ["OnInit"],
      "templateData": "<elix-jumbotron [type]=\"'template'\" class=\"mt-2 flex vorkurt__container-template\"\n                *ngIf=\"usersName\">\n  <div class=\"\">\n    <div class=\"flex items-start flex cursor-pointer p-0.5 items-stretch hover:w-96\"\n         (click)=\"onClick()\"\n    >\n      <div class=\"w-10 flex items-center\">\n        <mat-icon [svgIcon]=\"'fa_solid:check'\"></mat-icon>\n      </div>\n      <div *ngIf class=\"w-6 flex items-center\">\n        <!--        <img [src]='dataTemplate.icon'>-->\n      </div>\n      <div class=\"flex items-center\">\n        <button class=\"vorkurt__color-text font-bold\" mat-menu-item>{{usersName.user.email}}</button>\n      </div>\n    </div>\n  </div>\n</elix-jumbotron>\n"
    }
  ],
  "modules": [
    {
      "name": "AccountModule",
      "id": "module-AccountModule-e47cc50f13cb80ea703d31fad30be75e",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/account/account.module.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AccountComponent} from \"./account.component\";\nimport {AccountRouting} from \"./account.routing\";\nimport { LeftSideRepoComponent } from './left-side-repo/left-side-repo.component';\nimport { CenterActivityComponent } from './center-activity/center-activity.component';\nimport { RightSideArtifactsComponent } from './right-side-artifacts/right-side-artifacts.component';\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {FormsModule} from \"@angular/forms\";\n\n\n@NgModule({\n  declarations: [\n    AccountComponent,\n    LeftSideRepoComponent,\n    CenterActivityComponent,\n    RightSideArtifactsComponent,\n  ],\n    imports: [\n        CommonModule,\n        AccountRouting,\n        SharedModule,\n        MatIconModule,\n        MatFormFieldModule,\n        FormsModule\n    ]\n})\nexport class AccountModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AccountComponent"
            },
            {
              "name": "CenterActivityComponent"
            },
            {
              "name": "LeftSideRepoComponent"
            },
            {
              "name": "RightSideArtifactsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AccountRouting"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AccountRouting",
      "id": "module-AccountRouting-3305467212928a147e18e4415437d19c",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/account/account.routing.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {AccountComponent} from \"./account.component\";\nimport {AccountResolver} from \"../../shared/utils/services/resolvers/account/account.resolver\";\nimport {RepositoryTabProjectComponent} from \"../repository/repository-tab-project/repository-tab-project.component\";\n\nconst routes: Routes = [\n  {\n    path: '', component: AccountComponent,\n    resolve: {account: AccountResolver},\n    children:[{\n      path:'timer',\n      component: RepositoryTabProjectComponent\n    }]\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AccountRouting {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppExploreRouting",
      "id": "module-AppExploreRouting-1eb30ea119faf844a964b6398b00e6a2",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/explore/explore.routing.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {ExploreComponent} from \"./explore/explore.component\";\n\n\nconst routes: Routes = [\n\n  {\n    path: '', component: ExploreComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AppExploreRouting {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppHeaderRouting",
      "id": "module-AppHeaderRouting-7007317f4a00eafb212146b84ab8d873",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/header/header.routing.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {HeaderComponent} from \"./header.component\";\nimport {AuthGuardGuard} from \"../../shared/utils/services\";\n\n\nconst routes: Routes = [\n\n  {path: '', redirectTo: 'account', pathMatch: 'full'},\n\n  {\n    path: '', component: HeaderComponent,\n    children: [\n      {\n        path: 'account',\n        loadChildren: () => \"import('./../account/account.module').then(m => m.AccountModule)\"\n      },\n      {\n        path: 'new',\n        loadChildren: () => \"import('./../newRepo/new-repo.module').then(m => m.NewRepoModule)\"\n      },\n      {\n        path: 'timer',\n        loadChildren: () => \"import('./../timer/timer.module').then(m => m.TimerModule)\"\n      },\n      {\n        path: 'explore',\n        loadChildren: () => \"import ('./../explore/explore.module').then(m => m.ExploreModule)\"\n      },\n      {\n        path: \":id\",\n        canActivate: [AuthGuardGuard],\n        loadChildren: () => \"import('../repository/repository.module').then(m => m.RepositoryModule)\",\n      },\n    ]\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AppHeaderRouting {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppHeaderRouting",
      "id": "module-AppHeaderRouting-aa2d7d49a0b6a836ac849fed2a9b0da7-1",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/timer/timer.routing.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {TimmerComponent} from \"./timmer/timmer.component\";\n\n\nconst routes: Routes = [\n  {path: '', redirectTo: 'timer', pathMatch: 'full'},\n  {\n    path: '', component: TimmerComponent,\n  },\n\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AppHeaderRouting {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppModule",
      "id": "module-AppModule-c782b169a242ddaf34a5457c881dd848",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app.module.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {FormsModule} from \"@angular/forms\";\nimport {CoreModule} from \"../@core/core/core.module\";\nimport {SharedModule} from \"./shared/shared.module\";\nimport {firebaseConfig} from \"./config/auth/firebase\";\nimport {AngularFireModule} from \"@angular/fire/compat\";\nimport {AngularFireDatabaseModule} from \"@angular/fire/compat/database\";\nimport {AuthComponent} from './auth/auth.component';\nimport {MatRippleModule} from \"@angular/material/core\";\nimport {OverlayModule} from \"@angular/cdk/overlay\";\nimport {PageNotFoundComponent} from './auth/page-not-found/page-not-found.component';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatButtonModule} from '@angular/material/button';\nimport {LayoutModule} from '@angular/cdk/layout';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AuthComponent,\n    PageNotFoundComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatIconModule,\n    AngularFireModule.initializeApp(firebaseConfig),\n    AngularFireDatabaseModule,\n    FormsModule,\n    CoreModule,\n    SharedModule,\n    MatRippleModule,\n    OverlayModule,\n    MatGridListModule,\n    MatCardModule,\n    MatMenuModule,\n    MatButtonModule,\n    LayoutModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            },
            {
              "name": "AuthComponent"
            },
            {
              "name": "PageNotFoundComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "CoreModule"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppRepositoryRouting",
      "id": "module-AppRepositoryRouting-de63543d83912a4bc30eb29fdb850b96",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/repository/repository.routing.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {routerArray} from \"../../config/global/config-router\";\nimport {RepositoryTabProjectComponent} from \"./repository-tab-project/repository-tab-project.component\";\nimport {PullRequestComponent} from \"./pull-request/pull-request.component\";\nimport {CodeComponent} from \"./code/code.component\";\nimport {SettingsComponent} from \"./settings/settings.component\";\n\n\nconst routes: Routes = [\n  {path: '', redirectTo: ''}\n  ,\n  {\n    path: '', component: RepositoryTabProjectComponent,\n    data: {data: routerArray},\n    children: [{\n      path: 'code',\n      component: CodeComponent\n    }, {\n      path: 'pull_request',\n      component: PullRequestComponent\n    }, {\n      path: 'settings',\n      component: SettingsComponent\n    }\n    ]\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AppRepositoryRouting {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppRoutingModule",
      "id": "module-AppRoutingModule-49089a6f457455e5c232f76850d439bc",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app-routing.module.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {AuthComponent} from \"./auth/auth.component\";\nimport {AuthGuardGuard} from \"./shared/utils/services\";\nimport {routerArray} from \"./config/global/config-router\";\nimport {PageNotFoundComponent} from \"../@core/core/page-not-found/page-not-found.component\";\n\nconst routes: Routes = [\n  {\n    path: '',\n    data: {data: routerArray.pageHeader},\n    canActivate: [AuthGuardGuard],\n    loadChildren: () => \"import('./module/header/header.module').then(m => m.HeaderModule)\",\n  },\n  {\n    path: 'auth/test',\n    component: AuthComponent\n  },\n  {path: '', redirectTo: 'auth/test', pathMatch: 'full'},\n  {path: '**', component:PageNotFoundComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "CoreModule",
      "id": "module-CoreModule-9978ff9f50f2e7013787b0c08a8155d7",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/@core/core/core.module.ts",
      "methods": [],
      "sourceCode": "import {ErrorHandler, NgModule} from '@angular/core';\nimport {MatIconRegistry} from \"@angular/material/icon\";\nimport {DomSanitizer} from \"@angular/platform-browser\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {PageNotFoundComponent} from './page-not-found/page-not-found.component';\nimport {GlobalErrorHandleService} from \"../../app/shared/utils/services/abstract/global-error-handle.service\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {RouterModule} from \"@angular/router\";\n\n@NgModule({\n  imports: [HttpClientModule, MatButtonModule, RouterModule],\n  providers: [{provide: ErrorHandler, useClass: GlobalErrorHandleService}],\n  declarations: [\n    PageNotFoundComponent\n  ],\n  exports: [PageNotFoundComponent]\n})\nexport class CoreModule {\n  constructor(\n    private _domSanitizer: DomSanitizer,\n    private _matIconRegistry: MatIconRegistry,\n  ) {\n    this._matIconRegistry.addSvgIconSetInNamespace(\n      \"fa_brands\",\n      this._domSanitizer.bypassSecurityTrustResourceUrl(\"assets/icons/svgs/brands.svg\")\n    );\n    this._matIconRegistry.addSvgIconSetInNamespace(\n      \"fa_regular\",\n      this._domSanitizer.bypassSecurityTrustResourceUrl(\"assets/icons/svgs/regular.svg\")\n    );\n    this._matIconRegistry.addSvgIconSetInNamespace(\n      \"fa_solid\",\n      this._domSanitizer.bypassSecurityTrustResourceUrl(\"assets/icons/svgs/solid.svg\")\n    );\n  }\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "PageNotFoundComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "PageNotFoundComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ExploreModule",
      "id": "module-ExploreModule-dc0fbc72968e4f3323d6f0603144087f",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/explore/explore.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExploreComponent } from './explore/explore.component';\nimport {AppExploreRouting} from \"./explore.routing\";\n\n\n\n@NgModule({\n  declarations: [\n    ExploreComponent\n  ],\n  imports: [\n    CommonModule,\n    AppExploreRouting\n  ]\n})\nexport class ExploreModule { }\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ExploreComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppExploreRouting"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "HeaderModule",
      "id": "module-HeaderModule-6f5cc34e8b35f5b1205687770e018c28",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/header/header.module.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AppHeaderRouting} from \"./header.routing\";\nimport {HeaderComponent} from \"./header.component\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {FormsModule} from \"@angular/forms\";\nimport {PopUpLoginComponent} from './pop-up-login/pop-up-login.component';\nimport {OverlayModule} from \"@angular/cdk/overlay\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatTooltipModule} from \"@angular/material/tooltip\";\nimport {MatProgressBarModule} from \"@angular/material/progress-bar\";\nimport {MatBadgeModule} from \"@angular/material/badge\";\nimport {NotificationComponent} from \"./tooltip/notification/notification.component\";\n\n@NgModule({\n  declarations: [\n    HeaderComponent,\n    PopUpLoginComponent,\n    NotificationComponent\n  ],\n    imports: [\n        OverlayModule,\n        MatIconModule,\n        FormsModule,\n        CommonModule,\n        AppHeaderRouting,\n        DragDropModule,\n        SharedModule,\n        MatButtonModule,\n        MatTooltipModule,\n        MatProgressBarModule,\n        MatBadgeModule,\n    ],\n  entryComponents: [\n    PopUpLoginComponent\n  ],\n})\nexport class HeaderModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "HeaderComponent"
            },
            {
              "name": "NotificationComponent"
            },
            {
              "name": "PopUpLoginComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppHeaderRouting"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "NewRepoModule",
      "id": "module-NewRepoModule-0f6eea28268a1001e4952dd9d48e5997",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/newRepo/new-repo.module.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NewRepoComponent} from \"./new-repo.component\";\nimport {NewRepoRouting} from \"./new-repo.routing\";\nimport {HeaderNewRepoComponent} from './header-new-repo/header-new-repo.component';\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MiddleComponent} from \"./middle/middle.component\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {MatCheckboxModule} from \"@angular/material/checkbox\";\nimport {BottomComponent} from './bottom/bottom.component';\nimport {SharedModule} from \"../../shared/shared.module\";\nimport {DragDropModule} from \"@angular/cdk/drag-drop\";\nimport {TemplateRepositoryComponent} from './tooltip/template-repository/template-repository.component';\nimport { UserNameRepositoryComponent } from './tooltip/user-name-repository/user-name-repository.component';\nimport {MatButtonToggleModule} from \"@angular/material/button-toggle\";\nimport {MatMenuModule} from \"@angular/material/menu\";\nimport {FormsModule} from \"@angular/forms\";\n\n\n@NgModule({\n  declarations: [\n    NewRepoComponent,\n    HeaderNewRepoComponent,\n    MiddleComponent,\n    BottomComponent,\n    TemplateRepositoryComponent,\n    UserNameRepositoryComponent,\n  ],\n  imports: [\n    CommonModule,\n    NewRepoRouting,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatCheckboxModule,\n    SharedModule,\n    DragDropModule,\n    MatButtonToggleModule,\n    MatMenuModule,\n    FormsModule\n  ]\n})\nexport class NewRepoModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "BottomComponent"
            },
            {
              "name": "HeaderNewRepoComponent"
            },
            {
              "name": "MiddleComponent"
            },
            {
              "name": "NewRepoComponent"
            },
            {
              "name": "TemplateRepositoryComponent"
            },
            {
              "name": "UserNameRepositoryComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "NewRepoRouting"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "NewRepoRouting",
      "id": "module-NewRepoRouting-2c7a33a5206dfbe222110b0c033848fb",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/newRepo/new-repo.routing.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {NewRepoComponent} from \"./new-repo.component\";\nimport {NewRepositoryResolver} from \"../../shared/utils/services/resolvers/newRepository/new-repository.resolver\";\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NewRepoComponent,\n    resolve: {newRepo: NewRepositoryResolver}\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class NewRepoRouting {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "RepositoryModule",
      "id": "module-RepositoryModule-cd55c451709336efb3ef8adf2db12e3b",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/repository/repository.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {RepositoryTabProjectComponent} from \"./repository-tab-project/repository-tab-project.component\";\nimport {RouterModule} from \"@angular/router\";\nimport {AppRepositoryRouting} from \"./repository.routing\";\nimport { PullRequestComponent } from './pull-request/pull-request.component';\nimport { CodeComponent } from './code/code.component';\nimport { SettingsComponent } from './settings/settings.component';\n\n\n\n@NgModule({\n  declarations: [RepositoryTabProjectComponent, PullRequestComponent, CodeComponent, SettingsComponent],\n  imports: [\n    CommonModule,\n    AppRepositoryRouting\n  ]\n})\nexport class RepositoryModule { }\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "CodeComponent"
            },
            {
              "name": "PullRequestComponent"
            },
            {
              "name": "RepositoryTabProjectComponent"
            },
            {
              "name": "SettingsComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRepositoryRouting"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "SharedModule",
      "id": "module-SharedModule-e7400358d83065ff48a6f0b89f9d6f2d",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/shared.module.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ElixDragDirective} from './utils/directive/elix-drag.directive';\nimport {ElixSpinnerComponent} from \"./spinner/elix-spinner.component\";\nimport {ElixJumbotronComponent} from './component/jumbotron/elix-jumbotron.component';\n\n@NgModule({\n  declarations: [ElixSpinnerComponent, ElixDragDirective, ElixJumbotronComponent],\n  imports: [\n    CommonModule,\n  ],\n  exports: [ElixSpinnerComponent, ElixDragDirective, ElixJumbotronComponent]\n})\nexport class SharedModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "ElixDragDirective"
            },
            {
              "name": "ElixJumbotronComponent"
            },
            {
              "name": "ElixSpinnerComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ElixDragDirective"
            },
            {
              "name": "ElixJumbotronComponent"
            },
            {
              "name": "ElixSpinnerComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TimerModule",
      "id": "module-TimerModule-cc5c0d0f77ade9c506d1d35949ff7bf9",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/module/timer/timer.module.ts",
      "methods": [],
      "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TimmerComponent} from './timmer/timmer.component';\nimport {AppHeaderRouting} from \"./timer.routing\";\nimport {MatIconModule} from \"@angular/material/icon\";\nimport {MatButtonModule} from \"@angular/material/button\";\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatFormFieldModule} from \"@angular/material/form-field\";\nimport {FormsModule} from \"@angular/forms\";\n\n\n@NgModule({\n  declarations: [\n    TimmerComponent\n  ],\n  imports: [\n    CommonModule,\n    AppHeaderRouting,\n    MatIconModule,\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule,\n    FormsModule\n  ]\n})\nexport class TimerModule {\n}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "TimmerComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppHeaderRouting"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "ColorLight",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header-cusotm.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "DEFAULT_CONFIG",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/shared/utils/services/overlay/overlay-pop-up.service.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "IDialoConfig",
        "defaultValue": "{\n  hasBackdrop: true,\n  backdropClass: 'dark-backdrop',\n  panelClass: 'elixir-dialog-panel'\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.prod.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: true\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: false\n}"
      },
      {
        "name": "firebaseConfig",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/config/auth/firebase.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  apiKey: \"AIzaSyA6YpwfAmlLH4o6B1NQQeQ1uoHYnJoOvHs\",\n  authDomain: \"vorkurt.firebaseapp.com\",\n  databaseURL: \"https://vorkurt-default-rtdb.firebaseio.com\",\n  projectId: \"vorkurt\",\n  storageBucket: \"vorkurt.appspot.com\",\n  messagingSenderId: \"1044413194434\",\n  appId: \"1:1044413194434:web:4667694345fbde0e6adb5b\",\n  measurementId: \"G-49RDGK301M\"\n}"
      },
      {
        "name": "Large",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedIn",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedIns",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/test.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "LoggedOut",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Primary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "literal type"
      },
      {
        "name": "routerArray",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/config/global/config-router.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Object.freeze({\n  router: [\n    {\n      name: 'Pull Request',\n      path: 'pull_request'\n    } as IConfigRouter,\n    {\n      name: 'Code',\n      path: 'code'\n    } as IConfigRouter, {\n      name: 'Settings',\n      path: 'settings'\n    } as IConfigRouter\n  ],\n  pageHeader: [\n    {\n      name: 'Issues',\n      path: 'issues'\n    },\n    {\n      name: 'Marketplace',\n      path: 'marketplace'\n    },{\n      name: 'Explore',\n      path: 'explore'\n    },\n    {\n      name: 'Timer',\n      path: 'timer'\n    },\n    {\n      name: 'Transport',\n      path: 'tms'\n    }\n  ] as IConfigRouter[]\n\n})"
      },
      {
        "name": "Secondary",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Small",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "STemplate",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header-cusotm.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<HeaderComponent>",
        "defaultValue": "(args: HeaderComponent) => (\n  {\n    props: args,\n    template: `<elix-header></elix-header>\n`\n  })"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Button>",
        "defaultValue": "(args: Button) => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Header.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Header>",
        "defaultValue": "(args: Header) => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/Page.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<Page>",
        "defaultValue": "(args: Page) => ({\n  props: args,\n})"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/test.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<HeaderComponent>",
        "defaultValue": "(args: HeaderComponent) => ({\n  props: args,\n})"
      }
    ],
    "functions": [],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "src/stories/Header-cusotm.stories.ts": [
        {
          "name": "ColorLight",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header-cusotm.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "STemplate",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header-cusotm.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<HeaderComponent>",
          "defaultValue": "(args: HeaderComponent) => (\n  {\n    props: args,\n    template: `<elix-header></elix-header>\n`\n  })"
        }
      ],
      "src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type"
        }
      ],
      "src/app/shared/utils/services/overlay/overlay-pop-up.service.ts": [
        {
          "name": "DEFAULT_CONFIG",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/shared/utils/services/overlay/overlay-pop-up.service.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "IDialoConfig",
          "defaultValue": "{\n  hasBackdrop: true,\n  backdropClass: 'dark-backdrop',\n  panelClass: 'elixir-dialog-panel'\n}"
        }
      ],
      "src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.prod.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: true\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: false\n}"
        }
      ],
      "src/app/config/auth/firebase.ts": [
        {
          "name": "firebaseConfig",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/config/auth/firebase.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  apiKey: \"AIzaSyA6YpwfAmlLH4o6B1NQQeQ1uoHYnJoOvHs\",\n  authDomain: \"vorkurt.firebaseapp.com\",\n  databaseURL: \"https://vorkurt-default-rtdb.firebaseio.com\",\n  projectId: \"vorkurt\",\n  storageBucket: \"vorkurt.appspot.com\",\n  messagingSenderId: \"1044413194434\",\n  appId: \"1:1044413194434:web:4667694345fbde0e6adb5b\",\n  measurementId: \"G-49RDGK301M\"\n}"
        }
      ],
      "src/stories/Button.stories.ts": [
        {
          "name": "Large",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Primary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Secondary",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Small",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Button>",
          "defaultValue": "(args: Button) => ({\n  props: args,\n})"
        }
      ],
      "src/stories/Header.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Header.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Header>",
          "defaultValue": "(args: Header) => ({\n  props: args,\n})"
        }
      ],
      "src/stories/Page.stories.ts": [
        {
          "name": "LoggedIn",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "LoggedOut",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/Page.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<Page>",
          "defaultValue": "(args: Page) => ({\n  props: args,\n})"
        }
      ],
      "src/stories/test.stories.ts": [
        {
          "name": "LoggedIns",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/test.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/test.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<HeaderComponent>",
          "defaultValue": "(args: HeaderComponent) => ({\n  props: args,\n})"
        }
      ],
      "src/app/config/global/config-router.ts": [
        {
          "name": "routerArray",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/config/global/config-router.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Object.freeze({\n  router: [\n    {\n      name: 'Pull Request',\n      path: 'pull_request'\n    } as IConfigRouter,\n    {\n      name: 'Code',\n      path: 'code'\n    } as IConfigRouter, {\n      name: 'Settings',\n      path: 'settings'\n    } as IConfigRouter\n  ],\n  pageHeader: [\n    {\n      name: 'Issues',\n      path: 'issues'\n    },\n    {\n      name: 'Marketplace',\n      path: 'marketplace'\n    },{\n      name: 'Explore',\n      path: 'explore'\n    },\n    {\n      name: 'Timer',\n      path: 'timer'\n    },\n    {\n      name: 'Transport',\n      path: 'tms'\n    }\n  ] as IConfigRouter[]\n\n})"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": {
    "name": "<root>",
    "kind": "module",
    "className": "AppModule",
    "children": [
      {
        "name": "routes",
        "filename": "src/app/app-routing.module.ts",
        "module": "AppRoutingModule",
        "kind": "module"
      }
    ]
  },
  "coverage": {
    "count": 1,
    "status": "low",
    "files": [
      {
        "filePath": "src/@core/core/page-not-found/page-not-found.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageNotFoundComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/auth/auth.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AuthComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/auth/page-not-found/page-not-found.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageNotFoundComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/config/auth/firebase.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "firebaseConfig",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/config/global/config-router.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "routerArray",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/module/account/account.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AccountComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/module/account/center-activity/center-activity.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CenterActivityComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/module/account/left-side-repo/left-side-repo.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "LeftSideRepoComponent",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/module/account/right-side-artifacts/right-side-artifacts.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RightSideArtifactsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/module/explore/explore/explore.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExploreComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/module/header/header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/module/header/pop-up-login/pop-up-login.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PopUpLoginComponent",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/app/module/header/pop-up-login/pop-up-state.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "PopUpStateService",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/module/header/pop-up-login/pop-up-state.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IOffsetPopUp",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/module/header/tooltip/notification/notification.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NotificationComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/module/newRepo/bottom/bottom.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "BottomComponent",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/module/newRepo/header-new-repo/header-new-repo.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HeaderNewRepoComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/module/newRepo/middle/middle.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "MiddleComponent",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/module/newRepo/new-repo.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "NewRepoComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/module/newRepo/tooltip/template-repository/template-repository.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TemplateRepositoryComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/module/newRepo/tooltip/user-name-repository/user-name-repository.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "UserNameRepositoryComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/module/repository/code/code.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "CodeComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/module/repository/pull-request/pull-request.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PullRequestComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/module/repository/repository-tab-project/repository-tab-project.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "RepositoryTabProjectComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/module/repository/settings/settings.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SettingsComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/module/timer/timmer/timmer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TimmerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/20",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/component/jumbotron/elix-jumbotron.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ElixJumbotronComponent",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/spinner/elix-spinner.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ElixSpinnerComponent",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/spinner/spinner-state.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "SpinnerStateService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/directive/elix-drag.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "ElixDragDirective",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/interfaces/account/account.type.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAccount",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/interfaces/auth/auth-info-user.types.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAuthInfoResponse",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/interfaces/auth/auth-info-user.types.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IAuthInfoUser",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/interfaces/data-table.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "DataTable",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/interfaces/data-table.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IConfigRouter",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/interfaces/data-table.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ITimer",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/interfaces/newRepository/new-repository.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "INewRepository",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/interfaces/newRepository/new-repository.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IWrapperRepository",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/interfaces/user/user.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "User",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/abstract/abstract-api-service.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AbstractApiServiceService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/abstract/global-error-handle.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "GlobalErrorHandleService",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/abstract/local-storage-data.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "LocalStorageDataService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/account/account.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AccountService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/auth/auth.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "AuthService",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/data-table/data-table.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DataTableService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/firebase/connection.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "ConnectionService",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/guards/auth-guard.guard.ts",
        "type": "guard",
        "linktype": "guard",
        "name": "AuthGuardGuard",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/newRepository/new-repository.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "NewRepositoryService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/newRepository/template-repository/template-repository.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TemplateRepositoryService",
        "coveragePercent": 0,
        "coverageCount": "0/17",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/overlay/overlay-pop-up.ref.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "OverlayPopUpRef",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/overlay/overlay-pop-up.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "OverlayPopUpService",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/overlay/overlay-pop-up.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "IDialoConfig",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/overlay/overlay-pop-up.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DEFAULT_CONFIG",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/overlay/overlay.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "OverlayService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/resolvers/account/account.resolver.ts",
        "type": "guard",
        "linktype": "guard",
        "name": "AccountResolver",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/resolvers/newRepository/new-repository.resolver.ts",
        "type": "guard",
        "linktype": "guard",
        "name": "NewRepositoryResolver",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/resolvers/table/table-data.resolver.ts",
        "type": "guard",
        "linktype": "guard",
        "name": "TableDataResolver",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/timer/timer.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TimerService",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/utils/services/user/user-service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "UserService",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Large",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Primary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Secondary",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Small",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header-cusotm.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "ColorLight",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header-cusotm.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "STemplate",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Header.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIn",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedOut",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/Page.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 83,
        "coverageCount": "5/6",
        "status": "very-good"
      },
      {
        "filePath": "src/stories/header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/stories/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/stories/test.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "LoggedIns",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/test.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
